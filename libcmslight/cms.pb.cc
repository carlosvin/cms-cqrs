// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cms.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cms.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#include <grpc++/async_unary_call.h>
#include <grpc++/channel_interface.h>
#include <grpc++/impl/client_unary_call.h>
#include <grpc++/impl/rpc_method.h>
#include <grpc++/impl/rpc_service_method.h>
#include <grpc++/impl/service_type.h>
#include <grpc++/stream.h>
// @@protoc_insertion_point(includes)

namespace cms {

namespace {

const ::google::protobuf::Descriptor* Uuid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Uuid_reflection_ = NULL;
const ::google::protobuf::Descriptor* Order_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Order_reflection_ = NULL;
const ::google::protobuf::Descriptor* Page_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Page_reflection_ = NULL;
const ::google::protobuf::Descriptor* Query_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Query_reflection_ = NULL;
const ::google::protobuf::Descriptor* Filter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Filter_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CmdResponse_Level_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Content_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Content_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContentList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContentList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cms_2eproto() {
  protobuf_AddDesc_cms_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cms.proto");
  GOOGLE_CHECK(file != NULL);
  Uuid_descriptor_ = file->message_type(0);
  static const int Uuid_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Uuid, least_significant_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Uuid, most_significant_bits_),
  };
  Uuid_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Uuid_descriptor_,
      Uuid::default_instance_,
      Uuid_offsets_,
      -1,
      -1,
      -1,
      sizeof(Uuid),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Uuid, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Uuid, _is_default_instance_));
  Order_descriptor_ = file->message_type(1);
  static const int Order_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, asc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, property_),
  };
  Order_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Order_descriptor_,
      Order::default_instance_,
      Order_offsets_,
      -1,
      -1,
      -1,
      sizeof(Order),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Order, _is_default_instance_));
  Page_descriptor_ = file->message_type(2);
  static const int Page_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Page, page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Page, elements_),
  };
  Page_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Page_descriptor_,
      Page::default_instance_,
      Page_offsets_,
      -1,
      -1,
      -1,
      sizeof(Page),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Page, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Page, _is_default_instance_));
  Query_descriptor_ = file->message_type(3);
  static const int Query_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query, order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query, page_),
  };
  Query_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Query_descriptor_,
      Query::default_instance_,
      Query_offsets_,
      -1,
      -1,
      -1,
      sizeof(Query),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query, _is_default_instance_));
  Filter_descriptor_ = file->message_type(4);
  static const int Filter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Filter, by_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Filter, order_),
  };
  Filter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Filter_descriptor_,
      Filter::default_instance_,
      Filter_offsets_,
      -1,
      -1,
      -1,
      sizeof(Filter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Filter, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Filter, _is_default_instance_));
  CmdResponse_descriptor_ = file->message_type(5);
  static const int CmdResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResponse, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResponse, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResponse, info_),
  };
  CmdResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CmdResponse_descriptor_,
      CmdResponse::default_instance_,
      CmdResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(CmdResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResponse, _is_default_instance_));
  CmdResponse_Level_descriptor_ = CmdResponse_descriptor_->enum_type(0);
  Content_descriptor_ = file->message_type(6);
  static const int Content_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Content, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Content, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Content, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Content, creation_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Content, updated_timestamp_),
  };
  Content_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Content_descriptor_,
      Content::default_instance_,
      Content_offsets_,
      -1,
      -1,
      -1,
      sizeof(Content),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Content, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Content, _is_default_instance_));
  ContentList_descriptor_ = file->message_type(7);
  static const int ContentList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentList, contents_),
  };
  ContentList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ContentList_descriptor_,
      ContentList::default_instance_,
      ContentList_offsets_,
      -1,
      -1,
      -1,
      sizeof(ContentList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentList, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentList, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cms_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Uuid_descriptor_, &Uuid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Order_descriptor_, &Order::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Page_descriptor_, &Page::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Query_descriptor_, &Query::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Filter_descriptor_, &Filter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CmdResponse_descriptor_, &CmdResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Content_descriptor_, &Content::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ContentList_descriptor_, &ContentList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cms_2eproto() {
  delete Uuid::default_instance_;
  delete Uuid_reflection_;
  delete Order::default_instance_;
  delete Order_reflection_;
  delete Page::default_instance_;
  delete Page_reflection_;
  delete Query::default_instance_;
  delete Query_reflection_;
  delete Filter::default_instance_;
  delete Filter_reflection_;
  delete CmdResponse::default_instance_;
  delete CmdResponse_reflection_;
  delete Content::default_instance_;
  delete Content_reflection_;
  delete ContentList::default_instance_;
  delete ContentList_reflection_;
}

void protobuf_AddDesc_cms_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tcms.proto\022\003cms\"E\n\004Uuid\022\036\n\026least_signif"
    "icant_bits\030\001 \001(\022\022\035\n\025most_significant_bit"
    "s\030\002 \001(\022\"&\n\005Order\022\013\n\003asc\030\001 \001(\010\022\020\n\010propert"
    "y\030\002 \001(\t\"&\n\004Page\022\014\n\004page\030\001 \001(\r\022\020\n\010element"
    "s\030\002 \001(\r\";\n\005Query\022\031\n\005order\030\001 \003(\0132\n.cms.Or"
    "der\022\027\n\004page\030\002 \003(\0132\t.cms.Page\"/\n\006Filter\022\n"
    "\n\002by\030\001 \001(\t\022\031\n\005order\030\002 \001(\0132\n.cms.Order\"\203\001"
    "\n\013CmdResponse\022\014\n\004path\030\001 \001(\t\022%\n\005level\030\002 \001"
    "(\0162\026.cms.CmdResponse.Level\022\014\n\004info\030\003 \001(\t"
    "\"1\n\005Level\022\t\n\005DEBUG\020\000\022\010\n\004INFO\020\001\022\010\n\004WARN\020\002"
    "\022\t\n\005ERROR\020\003\"{\n\007Content\022\025\n\002id\030\001 \001(\0132\t.cms"
    ".Uuid\022\r\n\005title\030\002 \001(\t\022\023\n\013description\030\003 \001("
    "\t\022\032\n\022creation_timestamp\030\004 \001(\r\022\031\n\021updated"
    "_timestamp\030\005 \001(\r\"-\n\013ContentList\022\036\n\010conte"
    "nts\030\001 \003(\0132\014.cms.Content2\?\n\021ContentCmdHan"
    "dler\022*\n\006Create\022\014.cms.Content\032\020.cms.CmdRe"
    "sponse\"\0002W\n\010CmsQuery\022 \n\003get\022\t.cms.Uuid\032\014"
    ".cms.Content\"\000\022)\n\007get_all\022\n.cms.Query\032\020."
    "cms.ContentList\"\000B\014\n\007com.cms\370\001\001b\006proto3", 759);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cms.proto", &protobuf_RegisterTypes);
  Uuid::default_instance_ = new Uuid();
  Order::default_instance_ = new Order();
  Page::default_instance_ = new Page();
  Query::default_instance_ = new Query();
  Filter::default_instance_ = new Filter();
  CmdResponse::default_instance_ = new CmdResponse();
  Content::default_instance_ = new Content();
  ContentList::default_instance_ = new ContentList();
  Uuid::default_instance_->InitAsDefaultInstance();
  Order::default_instance_->InitAsDefaultInstance();
  Page::default_instance_->InitAsDefaultInstance();
  Query::default_instance_->InitAsDefaultInstance();
  Filter::default_instance_->InitAsDefaultInstance();
  CmdResponse::default_instance_->InitAsDefaultInstance();
  Content::default_instance_->InitAsDefaultInstance();
  ContentList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cms_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cms_2eproto {
  StaticDescriptorInitializer_cms_2eproto() {
    protobuf_AddDesc_cms_2eproto();
  }
} static_descriptor_initializer_cms_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int Uuid::kLeastSignificantBitsFieldNumber;
const int Uuid::kMostSignificantBitsFieldNumber;
#endif  // !_MSC_VER

Uuid::Uuid()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cms.Uuid)
}

Uuid::Uuid(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cms.Uuid)
}

void Uuid::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Uuid::Uuid(const Uuid& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cms.Uuid)
}

void Uuid::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  least_significant_bits_ = GOOGLE_LONGLONG(0);
  most_significant_bits_ = GOOGLE_LONGLONG(0);
}

Uuid::~Uuid() {
  // @@protoc_insertion_point(destructor:cms.Uuid)
  SharedDtor();
}

void Uuid::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
  }
}

void Uuid::ArenaDtor(void* object) {
  Uuid* _this = reinterpret_cast< Uuid* >(object);
  (void)_this;
}
void Uuid::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Uuid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Uuid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Uuid_descriptor_;
}

const Uuid& Uuid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cms_2eproto();
  return *default_instance_;
}

Uuid* Uuid::default_instance_ = NULL;

Uuid* Uuid::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Uuid>(arena);
}

void Uuid::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Uuid*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(least_significant_bits_, most_significant_bits_);

#undef OFFSET_OF_FIELD_
#undef ZR_

}

bool Uuid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cms.Uuid)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint64 least_significant_bits = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &least_significant_bits_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_most_significant_bits;
        break;
      }

      // optional sint64 most_significant_bits = 2;
      case 2: {
        if (tag == 16) {
         parse_most_significant_bits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &most_significant_bits_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cms.Uuid)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cms.Uuid)
  return false;
#undef DO_
}

void Uuid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cms.Uuid)
  // optional sint64 least_significant_bits = 1;
  if (this->least_significant_bits() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->least_significant_bits(), output);
  }

  // optional sint64 most_significant_bits = 2;
  if (this->most_significant_bits() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->most_significant_bits(), output);
  }

  // @@protoc_insertion_point(serialize_end:cms.Uuid)
}

::google::protobuf::uint8* Uuid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cms.Uuid)
  // optional sint64 least_significant_bits = 1;
  if (this->least_significant_bits() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->least_significant_bits(), target);
  }

  // optional sint64 most_significant_bits = 2;
  if (this->most_significant_bits() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->most_significant_bits(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cms.Uuid)
  return target;
}

int Uuid::ByteSize() const {
  int total_size = 0;

  // optional sint64 least_significant_bits = 1;
  if (this->least_significant_bits() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->least_significant_bits());
  }

  // optional sint64 most_significant_bits = 2;
  if (this->most_significant_bits() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->most_significant_bits());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Uuid::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Uuid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Uuid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Uuid::MergeFrom(const Uuid& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.least_significant_bits() != 0) {
    set_least_significant_bits(from.least_significant_bits());
  }
  if (from.most_significant_bits() != 0) {
    set_most_significant_bits(from.most_significant_bits());
  }
}

void Uuid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Uuid::CopyFrom(const Uuid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Uuid::IsInitialized() const {

  return true;
}

void Uuid::Swap(Uuid* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Uuid temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void Uuid::UnsafeArenaSwap(Uuid* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Uuid::InternalSwap(Uuid* other) {
  std::swap(least_significant_bits_, other->least_significant_bits_);
  std::swap(most_significant_bits_, other->most_significant_bits_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Uuid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Uuid_descriptor_;
  metadata.reflection = Uuid_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Order::kAscFieldNumber;
const int Order::kPropertyFieldNumber;
#endif  // !_MSC_VER

Order::Order()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cms.Order)
}

Order::Order(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cms.Order)
}

void Order::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Order::Order(const Order& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cms.Order)
}

void Order::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  asc_ = false;
  property_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Order::~Order() {
  // @@protoc_insertion_point(destructor:cms.Order)
  SharedDtor();
}

void Order::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  property_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
  }
}

void Order::ArenaDtor(void* object) {
  Order* _this = reinterpret_cast< Order* >(object);
  (void)_this;
}
void Order::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Order::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Order::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Order_descriptor_;
}

const Order& Order::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cms_2eproto();
  return *default_instance_;
}

Order* Order::default_instance_ = NULL;

Order* Order::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Order>(arena);
}

void Order::Clear() {
  asc_ = false;
  property_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool Order::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cms.Order)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool asc = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &asc_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_property;
        break;
      }

      // optional string property = 2;
      case 2: {
        if (tag == 18) {
         parse_property:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_property()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->property().data(), this->property().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cms.Order.property");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cms.Order)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cms.Order)
  return false;
#undef DO_
}

void Order::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cms.Order)
  // optional bool asc = 1;
  if (this->asc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->asc(), output);
  }

  // optional string property = 2;
  if (this->property().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->property().data(), this->property().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cms.Order.property");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->property(), output);
  }

  // @@protoc_insertion_point(serialize_end:cms.Order)
}

::google::protobuf::uint8* Order::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cms.Order)
  // optional bool asc = 1;
  if (this->asc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->asc(), target);
  }

  // optional string property = 2;
  if (this->property().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->property().data(), this->property().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cms.Order.property");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->property(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cms.Order)
  return target;
}

int Order::ByteSize() const {
  int total_size = 0;

  // optional bool asc = 1;
  if (this->asc() != 0) {
    total_size += 1 + 1;
  }

  // optional string property = 2;
  if (this->property().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->property());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Order::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Order* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Order*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Order::MergeFrom(const Order& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.asc() != 0) {
    set_asc(from.asc());
  }
  if (from.property().size() > 0) {
    set_property(from.property());
  }
}

void Order::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Order::CopyFrom(const Order& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Order::IsInitialized() const {

  return true;
}

void Order::Swap(Order* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Order temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void Order::UnsafeArenaSwap(Order* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Order::InternalSwap(Order* other) {
  std::swap(asc_, other->asc_);
  property_.Swap(&other->property_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Order::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Order_descriptor_;
  metadata.reflection = Order_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Page::kPageFieldNumber;
const int Page::kElementsFieldNumber;
#endif  // !_MSC_VER

Page::Page()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cms.Page)
}

Page::Page(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cms.Page)
}

void Page::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Page::Page(const Page& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cms.Page)
}

void Page::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  page_ = 0u;
  elements_ = 0u;
}

Page::~Page() {
  // @@protoc_insertion_point(destructor:cms.Page)
  SharedDtor();
}

void Page::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
  }
}

void Page::ArenaDtor(void* object) {
  Page* _this = reinterpret_cast< Page* >(object);
  (void)_this;
}
void Page::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Page::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Page::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Page_descriptor_;
}

const Page& Page::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cms_2eproto();
  return *default_instance_;
}

Page* Page::default_instance_ = NULL;

Page* Page::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Page>(arena);
}

void Page::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Page*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(page_, elements_);

#undef OFFSET_OF_FIELD_
#undef ZR_

}

bool Page::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cms.Page)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 page = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &page_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_elements;
        break;
      }

      // optional uint32 elements = 2;
      case 2: {
        if (tag == 16) {
         parse_elements:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &elements_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cms.Page)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cms.Page)
  return false;
#undef DO_
}

void Page::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cms.Page)
  // optional uint32 page = 1;
  if (this->page() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->page(), output);
  }

  // optional uint32 elements = 2;
  if (this->elements() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->elements(), output);
  }

  // @@protoc_insertion_point(serialize_end:cms.Page)
}

::google::protobuf::uint8* Page::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cms.Page)
  // optional uint32 page = 1;
  if (this->page() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->page(), target);
  }

  // optional uint32 elements = 2;
  if (this->elements() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->elements(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cms.Page)
  return target;
}

int Page::ByteSize() const {
  int total_size = 0;

  // optional uint32 page = 1;
  if (this->page() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->page());
  }

  // optional uint32 elements = 2;
  if (this->elements() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->elements());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Page::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Page* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Page*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Page::MergeFrom(const Page& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.page() != 0) {
    set_page(from.page());
  }
  if (from.elements() != 0) {
    set_elements(from.elements());
  }
}

void Page::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Page::CopyFrom(const Page& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Page::IsInitialized() const {

  return true;
}

void Page::Swap(Page* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Page temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void Page::UnsafeArenaSwap(Page* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Page::InternalSwap(Page* other) {
  std::swap(page_, other->page_);
  std::swap(elements_, other->elements_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Page::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Page_descriptor_;
  metadata.reflection = Page_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Query::kOrderFieldNumber;
const int Query::kPageFieldNumber;
#endif  // !_MSC_VER

Query::Query()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cms.Query)
}

Query::Query(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  order_(arena),
  page_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cms.Query)
}

void Query::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Query::Query(const Query& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cms.Query)
}

void Query::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

Query::~Query() {
  // @@protoc_insertion_point(destructor:cms.Query)
  SharedDtor();
}

void Query::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
  }
}

void Query::ArenaDtor(void* object) {
  Query* _this = reinterpret_cast< Query* >(object);
  (void)_this;
}
void Query::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Query::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Query::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Query_descriptor_;
}

const Query& Query::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cms_2eproto();
  return *default_instance_;
}

Query* Query::default_instance_ = NULL;

Query* Query::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Query>(arena);
}

void Query::Clear() {
  order_.Clear();
  page_.Clear();
}

bool Query::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cms.Query)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cms.Order order = 1;
      case 1: {
        if (tag == 10) {
         parse_order:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_order()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_order;
        if (input->ExpectTag(18)) goto parse_page;
        break;
      }

      // repeated .cms.Page page = 2;
      case 2: {
        if (tag == 18) {
         parse_page:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_page()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_page;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cms.Query)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cms.Query)
  return false;
#undef DO_
}

void Query::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cms.Query)
  // repeated .cms.Order order = 1;
  for (unsigned int i = 0, n = this->order_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->order(i), output);
  }

  // repeated .cms.Page page = 2;
  for (unsigned int i = 0, n = this->page_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->page(i), output);
  }

  // @@protoc_insertion_point(serialize_end:cms.Query)
}

::google::protobuf::uint8* Query::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cms.Query)
  // repeated .cms.Order order = 1;
  for (unsigned int i = 0, n = this->order_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->order(i), target);
  }

  // repeated .cms.Page page = 2;
  for (unsigned int i = 0, n = this->page_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->page(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cms.Query)
  return target;
}

int Query::ByteSize() const {
  int total_size = 0;

  // repeated .cms.Order order = 1;
  total_size += 1 * this->order_size();
  for (int i = 0; i < this->order_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->order(i));
  }

  // repeated .cms.Page page = 2;
  total_size += 1 * this->page_size();
  for (int i = 0; i < this->page_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->page(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Query::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Query* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Query*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Query::MergeFrom(const Query& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  order_.MergeFrom(from.order_);
  page_.MergeFrom(from.page_);
}

void Query::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Query::CopyFrom(const Query& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Query::IsInitialized() const {

  return true;
}

void Query::Swap(Query* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Query temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void Query::UnsafeArenaSwap(Query* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Query::InternalSwap(Query* other) {
  order_.UnsafeArenaSwap(&other->order_);
  page_.UnsafeArenaSwap(&other->page_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Query::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Query_descriptor_;
  metadata.reflection = Query_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Filter::kByFieldNumber;
const int Filter::kOrderFieldNumber;
#endif  // !_MSC_VER

Filter::Filter()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cms.Filter)
}

Filter::Filter(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cms.Filter)
}

void Filter::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  order_ = const_cast< ::cms::Order*>(&::cms::Order::default_instance());
}

Filter::Filter(const Filter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cms.Filter)
}

void Filter::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  by_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_ = NULL;
}

Filter::~Filter() {
  // @@protoc_insertion_point(destructor:cms.Filter)
  SharedDtor();
}

void Filter::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  by_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
    delete order_;
  }
}

void Filter::ArenaDtor(void* object) {
  Filter* _this = reinterpret_cast< Filter* >(object);
  (void)_this;
}
void Filter::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Filter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Filter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Filter_descriptor_;
}

const Filter& Filter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cms_2eproto();
  return *default_instance_;
}

Filter* Filter::default_instance_ = NULL;

Filter* Filter::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Filter>(arena);
}

void Filter::Clear() {
  by_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (order_ != NULL) delete order_;
  order_ = NULL;
}

bool Filter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cms.Filter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string by = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_by()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->by().data(), this->by().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cms.Filter.by");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_order;
        break;
      }

      // optional .cms.Order order = 2;
      case 2: {
        if (tag == 18) {
         parse_order:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_order()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cms.Filter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cms.Filter)
  return false;
#undef DO_
}

void Filter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cms.Filter)
  // optional string by = 1;
  if (this->by().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->by().data(), this->by().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cms.Filter.by");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->by(), output);
  }

  // optional .cms.Order order = 2;
  if (this->has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->order_, output);
  }

  // @@protoc_insertion_point(serialize_end:cms.Filter)
}

::google::protobuf::uint8* Filter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cms.Filter)
  // optional string by = 1;
  if (this->by().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->by().data(), this->by().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cms.Filter.by");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->by(), target);
  }

  // optional .cms.Order order = 2;
  if (this->has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->order_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cms.Filter)
  return target;
}

int Filter::ByteSize() const {
  int total_size = 0;

  // optional string by = 1;
  if (this->by().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->by());
  }

  // optional .cms.Order order = 2;
  if (this->has_order()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->order_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Filter::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Filter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Filter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Filter::MergeFrom(const Filter& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.by().size() > 0) {
    set_by(from.by());
  }
  if (from.has_order()) {
    mutable_order()->::cms::Order::MergeFrom(from.order());
  }
}

void Filter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Filter::CopyFrom(const Filter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Filter::IsInitialized() const {

  return true;
}

void Filter::Swap(Filter* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Filter temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void Filter::UnsafeArenaSwap(Filter* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Filter::InternalSwap(Filter* other) {
  by_.Swap(&other->by_);
  std::swap(order_, other->order_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Filter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Filter_descriptor_;
  metadata.reflection = Filter_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CmdResponse_Level_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdResponse_Level_descriptor_;
}
bool CmdResponse_Level_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CmdResponse_Level CmdResponse::DEBUG;
const CmdResponse_Level CmdResponse::INFO;
const CmdResponse_Level CmdResponse::WARN;
const CmdResponse_Level CmdResponse::ERROR;
const CmdResponse_Level CmdResponse::Level_MIN;
const CmdResponse_Level CmdResponse::Level_MAX;
const int CmdResponse::Level_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CmdResponse::kPathFieldNumber;
const int CmdResponse::kLevelFieldNumber;
const int CmdResponse::kInfoFieldNumber;
#endif  // !_MSC_VER

CmdResponse::CmdResponse()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cms.CmdResponse)
}

CmdResponse::CmdResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cms.CmdResponse)
}

void CmdResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CmdResponse::CmdResponse(const CmdResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cms.CmdResponse)
}

void CmdResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level_ = 0;
  info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CmdResponse::~CmdResponse() {
  // @@protoc_insertion_point(destructor:cms.CmdResponse)
  SharedDtor();
}

void CmdResponse::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  path_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  info_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
  }
}

void CmdResponse::ArenaDtor(void* object) {
  CmdResponse* _this = reinterpret_cast< CmdResponse* >(object);
  (void)_this;
}
void CmdResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CmdResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdResponse_descriptor_;
}

const CmdResponse& CmdResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cms_2eproto();
  return *default_instance_;
}

CmdResponse* CmdResponse::default_instance_ = NULL;

CmdResponse* CmdResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<CmdResponse>(arena);
}

void CmdResponse::Clear() {
  path_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  level_ = 0;
  info_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool CmdResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cms.CmdResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cms.CmdResponse.path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional .cms.CmdResponse.Level level = 2;
      case 2: {
        if (tag == 16) {
         parse_level:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_level(static_cast< ::cms::CmdResponse_Level >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }

      // optional string info = 3;
      case 3: {
        if (tag == 26) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->info().data(), this->info().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cms.CmdResponse.info");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cms.CmdResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cms.CmdResponse)
  return false;
#undef DO_
}

void CmdResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cms.CmdResponse)
  // optional string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cms.CmdResponse.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // optional .cms.CmdResponse.Level level = 2;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->level(), output);
  }

  // optional string info = 3;
  if (this->info().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cms.CmdResponse.info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->info(), output);
  }

  // @@protoc_insertion_point(serialize_end:cms.CmdResponse)
}

::google::protobuf::uint8* CmdResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cms.CmdResponse)
  // optional string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cms.CmdResponse.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // optional .cms.CmdResponse.Level level = 2;
  if (this->level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->level(), target);
  }

  // optional string info = 3;
  if (this->info().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cms.CmdResponse.info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->info(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cms.CmdResponse)
  return target;
}

int CmdResponse::ByteSize() const {
  int total_size = 0;

  // optional string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  // optional .cms.CmdResponse.Level level = 2;
  if (this->level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->level());
  }

  // optional string info = 3;
  if (this->info().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->info());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CmdResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdResponse::MergeFrom(const CmdResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.path().size() > 0) {
    set_path(from.path());
  }
  if (from.level() != 0) {
    set_level(from.level());
  }
  if (from.info().size() > 0) {
    set_info(from.info());
  }
}

void CmdResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdResponse::CopyFrom(const CmdResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdResponse::IsInitialized() const {

  return true;
}

void CmdResponse::Swap(CmdResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CmdResponse temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void CmdResponse::UnsafeArenaSwap(CmdResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CmdResponse::InternalSwap(CmdResponse* other) {
  path_.Swap(&other->path_);
  std::swap(level_, other->level_);
  info_.Swap(&other->info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CmdResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdResponse_descriptor_;
  metadata.reflection = CmdResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Content::kIdFieldNumber;
const int Content::kTitleFieldNumber;
const int Content::kDescriptionFieldNumber;
const int Content::kCreationTimestampFieldNumber;
const int Content::kUpdatedTimestampFieldNumber;
#endif  // !_MSC_VER

Content::Content()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cms.Content)
}

Content::Content(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cms.Content)
}

void Content::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  id_ = const_cast< ::cms::Uuid*>(&::cms::Uuid::default_instance());
}

Content::Content(const Content& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cms.Content)
}

void Content::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = NULL;
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  creation_timestamp_ = 0u;
  updated_timestamp_ = 0u;
}

Content::~Content() {
  // @@protoc_insertion_point(destructor:cms.Content)
  SharedDtor();
}

void Content::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  title_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  description_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
    delete id_;
  }
}

void Content::ArenaDtor(void* object) {
  Content* _this = reinterpret_cast< Content* >(object);
  (void)_this;
}
void Content::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Content::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Content::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Content_descriptor_;
}

const Content& Content::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cms_2eproto();
  return *default_instance_;
}

Content* Content::default_instance_ = NULL;

Content* Content::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Content>(arena);
}

void Content::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Content*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(creation_timestamp_, updated_timestamp_);
  if (id_ != NULL) delete id_;
  id_ = NULL;
  title_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  description_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());

#undef OFFSET_OF_FIELD_
#undef ZR_

}

bool Content::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cms.Content)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cms.Uuid id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_title;
        break;
      }

      // optional string title = 2;
      case 2: {
        if (tag == 18) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cms.Content.title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_description;
        break;
      }

      // optional string description = 3;
      case 3: {
        if (tag == 26) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cms.Content.description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_creation_timestamp;
        break;
      }

      // optional uint32 creation_timestamp = 4;
      case 4: {
        if (tag == 32) {
         parse_creation_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &creation_timestamp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_updated_timestamp;
        break;
      }

      // optional uint32 updated_timestamp = 5;
      case 5: {
        if (tag == 40) {
         parse_updated_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &updated_timestamp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cms.Content)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cms.Content)
  return false;
#undef DO_
}

void Content::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cms.Content)
  // optional .cms.Uuid id = 1;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  // optional string title = 2;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cms.Content.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  // optional string description = 3;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cms.Content.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->description(), output);
  }

  // optional uint32 creation_timestamp = 4;
  if (this->creation_timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->creation_timestamp(), output);
  }

  // optional uint32 updated_timestamp = 5;
  if (this->updated_timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->updated_timestamp(), output);
  }

  // @@protoc_insertion_point(serialize_end:cms.Content)
}

::google::protobuf::uint8* Content::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cms.Content)
  // optional .cms.Uuid id = 1;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->id_, target);
  }

  // optional string title = 2;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cms.Content.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  // optional string description = 3;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cms.Content.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->description(), target);
  }

  // optional uint32 creation_timestamp = 4;
  if (this->creation_timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->creation_timestamp(), target);
  }

  // optional uint32 updated_timestamp = 5;
  if (this->updated_timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->updated_timestamp(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cms.Content)
  return target;
}

int Content::ByteSize() const {
  int total_size = 0;

  // optional .cms.Uuid id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->id_);
  }

  // optional string title = 2;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());
  }

  // optional string description = 3;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // optional uint32 creation_timestamp = 4;
  if (this->creation_timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->creation_timestamp());
  }

  // optional uint32 updated_timestamp = 5;
  if (this->updated_timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->updated_timestamp());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Content::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Content* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Content*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Content::MergeFrom(const Content& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_id()) {
    mutable_id()->::cms::Uuid::MergeFrom(from.id());
  }
  if (from.title().size() > 0) {
    set_title(from.title());
  }
  if (from.description().size() > 0) {
    set_description(from.description());
  }
  if (from.creation_timestamp() != 0) {
    set_creation_timestamp(from.creation_timestamp());
  }
  if (from.updated_timestamp() != 0) {
    set_updated_timestamp(from.updated_timestamp());
  }
}

void Content::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Content::CopyFrom(const Content& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Content::IsInitialized() const {

  return true;
}

void Content::Swap(Content* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Content temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void Content::UnsafeArenaSwap(Content* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Content::InternalSwap(Content* other) {
  std::swap(id_, other->id_);
  title_.Swap(&other->title_);
  description_.Swap(&other->description_);
  std::swap(creation_timestamp_, other->creation_timestamp_);
  std::swap(updated_timestamp_, other->updated_timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Content::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Content_descriptor_;
  metadata.reflection = Content_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContentList::kContentsFieldNumber;
#endif  // !_MSC_VER

ContentList::ContentList()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cms.ContentList)
}

ContentList::ContentList(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  contents_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cms.ContentList)
}

void ContentList::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ContentList::ContentList(const ContentList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cms.ContentList)
}

void ContentList::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

ContentList::~ContentList() {
  // @@protoc_insertion_point(destructor:cms.ContentList)
  SharedDtor();
}

void ContentList::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
  }
}

void ContentList::ArenaDtor(void* object) {
  ContentList* _this = reinterpret_cast< ContentList* >(object);
  (void)_this;
}
void ContentList::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ContentList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContentList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContentList_descriptor_;
}

const ContentList& ContentList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cms_2eproto();
  return *default_instance_;
}

ContentList* ContentList::default_instance_ = NULL;

ContentList* ContentList::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ContentList>(arena);
}

void ContentList::Clear() {
  contents_.Clear();
}

bool ContentList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cms.ContentList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cms.Content contents = 1;
      case 1: {
        if (tag == 10) {
         parse_contents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_contents()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_contents;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cms.ContentList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cms.ContentList)
  return false;
#undef DO_
}

void ContentList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cms.ContentList)
  // repeated .cms.Content contents = 1;
  for (unsigned int i = 0, n = this->contents_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->contents(i), output);
  }

  // @@protoc_insertion_point(serialize_end:cms.ContentList)
}

::google::protobuf::uint8* ContentList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cms.ContentList)
  // repeated .cms.Content contents = 1;
  for (unsigned int i = 0, n = this->contents_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->contents(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cms.ContentList)
  return target;
}

int ContentList::ByteSize() const {
  int total_size = 0;

  // repeated .cms.Content contents = 1;
  total_size += 1 * this->contents_size();
  for (int i = 0; i < this->contents_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->contents(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContentList::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ContentList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContentList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContentList::MergeFrom(const ContentList& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  contents_.MergeFrom(from.contents_);
}

void ContentList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContentList::CopyFrom(const ContentList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContentList::IsInitialized() const {

  return true;
}

void ContentList::Swap(ContentList* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ContentList temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void ContentList::UnsafeArenaSwap(ContentList* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ContentList::InternalSwap(ContentList* other) {
  contents_.UnsafeArenaSwap(&other->contents_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ContentList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContentList_descriptor_;
  metadata.reflection = ContentList_reflection_;
  return metadata;
}


static const char* ContentCmdHandler_method_names[] = {
  "/cms.ContentCmdHandler/Create",
};

std::unique_ptr< ContentCmdHandler::Stub> ContentCmdHandler::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel) {
  std::unique_ptr< ContentCmdHandler::Stub> stub(new ContentCmdHandler::Stub());
  stub->set_channel(channel);
  return stub;
}

::grpc::Status ContentCmdHandler::Stub::Create(::grpc::ClientContext* context, const ::cms::Content& request, ::cms::CmdResponse* response) {
  return ::grpc::BlockingUnaryCall(channel(),::grpc::RpcMethod(ContentCmdHandler_method_names[0]), context, request, response);
}

std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cms::CmdResponse>> ContentCmdHandler::Stub::AsyncCreate(::grpc::ClientContext* context, const ::cms::Content& request, ::grpc::CompletionQueue* cq, void* tag) {
  return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cms::CmdResponse>>(new ::grpc::ClientAsyncResponseReader< ::cms::CmdResponse>(channel(), cq, ::grpc::RpcMethod(ContentCmdHandler_method_names[0]), context, request, tag));
}

ContentCmdHandler::AsyncService::AsyncService(::grpc::CompletionQueue* cq) : ::grpc::AsynchronousService(cq, ContentCmdHandler_method_names, 1) {}

ContentCmdHandler::Service::~Service() {
  delete service_;
}

::grpc::Status ContentCmdHandler::Service::Create(::grpc::ServerContext* context, const ::cms::Content* request, ::cms::CmdResponse* response) {
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED);
}

void ContentCmdHandler::AsyncService::RequestCreate(::grpc::ServerContext* context, ::cms::Content* request, ::grpc::ServerAsyncResponseWriter< ::cms::CmdResponse>* response, ::grpc::CompletionQueue* cq, void* tag) {
  AsynchronousService::RequestAsyncUnary(0, context, request, response, cq, tag);
}

::grpc::RpcService* ContentCmdHandler::Service::service() {
  if (service_ != nullptr) {
    return service_;
  }
  service_ = new ::grpc::RpcService();
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      ContentCmdHandler_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< ContentCmdHandler::Service, ::cms::Content, ::cms::CmdResponse>(
          std::function< ::grpc::Status(ContentCmdHandler::Service*, ::grpc::ServerContext*, const ::cms::Content*, ::cms::CmdResponse*)>(&ContentCmdHandler::Service::Create), this),
      new ::cms::Content, new ::cms::CmdResponse));
  return service_;
}


static const char* CmsQuery_method_names[] = {
  "/cms.CmsQuery/get",
  "/cms.CmsQuery/get_all",
};

std::unique_ptr< CmsQuery::Stub> CmsQuery::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel) {
  std::unique_ptr< CmsQuery::Stub> stub(new CmsQuery::Stub());
  stub->set_channel(channel);
  return stub;
}

::grpc::Status CmsQuery::Stub::get(::grpc::ClientContext* context, const ::cms::Uuid& request, ::cms::Content* response) {
  return ::grpc::BlockingUnaryCall(channel(),::grpc::RpcMethod(CmsQuery_method_names[0]), context, request, response);
}

std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cms::Content>> CmsQuery::Stub::Asyncget(::grpc::ClientContext* context, const ::cms::Uuid& request, ::grpc::CompletionQueue* cq, void* tag) {
  return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cms::Content>>(new ::grpc::ClientAsyncResponseReader< ::cms::Content>(channel(), cq, ::grpc::RpcMethod(CmsQuery_method_names[0]), context, request, tag));
}

::grpc::Status CmsQuery::Stub::get_all(::grpc::ClientContext* context, const ::cms::Query& request, ::cms::ContentList* response) {
  return ::grpc::BlockingUnaryCall(channel(),::grpc::RpcMethod(CmsQuery_method_names[1]), context, request, response);
}

std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cms::ContentList>> CmsQuery::Stub::Asyncget_all(::grpc::ClientContext* context, const ::cms::Query& request, ::grpc::CompletionQueue* cq, void* tag) {
  return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cms::ContentList>>(new ::grpc::ClientAsyncResponseReader< ::cms::ContentList>(channel(), cq, ::grpc::RpcMethod(CmsQuery_method_names[1]), context, request, tag));
}

CmsQuery::AsyncService::AsyncService(::grpc::CompletionQueue* cq) : ::grpc::AsynchronousService(cq, CmsQuery_method_names, 2) {}

CmsQuery::Service::~Service() {
  delete service_;
}

::grpc::Status CmsQuery::Service::get(::grpc::ServerContext* context, const ::cms::Uuid* request, ::cms::Content* response) {
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED);
}

void CmsQuery::AsyncService::Requestget(::grpc::ServerContext* context, ::cms::Uuid* request, ::grpc::ServerAsyncResponseWriter< ::cms::Content>* response, ::grpc::CompletionQueue* cq, void* tag) {
  AsynchronousService::RequestAsyncUnary(0, context, request, response, cq, tag);
}

::grpc::Status CmsQuery::Service::get_all(::grpc::ServerContext* context, const ::cms::Query* request, ::cms::ContentList* response) {
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED);
}

void CmsQuery::AsyncService::Requestget_all(::grpc::ServerContext* context, ::cms::Query* request, ::grpc::ServerAsyncResponseWriter< ::cms::ContentList>* response, ::grpc::CompletionQueue* cq, void* tag) {
  AsynchronousService::RequestAsyncUnary(1, context, request, response, cq, tag);
}

::grpc::RpcService* CmsQuery::Service::service() {
  if (service_ != nullptr) {
    return service_;
  }
  service_ = new ::grpc::RpcService();
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      CmsQuery_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< CmsQuery::Service, ::cms::Uuid, ::cms::Content>(
          std::function< ::grpc::Status(CmsQuery::Service*, ::grpc::ServerContext*, const ::cms::Uuid*, ::cms::Content*)>(&CmsQuery::Service::get), this),
      new ::cms::Uuid, new ::cms::Content));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      CmsQuery_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< CmsQuery::Service, ::cms::Query, ::cms::ContentList>(
          std::function< ::grpc::Status(CmsQuery::Service*, ::grpc::ServerContext*, const ::cms::Query*, ::cms::ContentList*)>(&CmsQuery::Service::get_all), this),
      new ::cms::Query, new ::cms::ContentList));
  return service_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cms

// @@protoc_insertion_point(global_scope)
