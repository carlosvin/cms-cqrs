// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cms.proto

#ifndef PROTOBUF_cms_2eproto__INCLUDED
#define PROTOBUF_cms_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <grpc++/impl/internal_stub.h>
#include <grpc++/impl/service_type.h>
#include <grpc++/status.h>

namespace grpc {
class CompletionQueue;
class ChannelInterface;
class RpcService;
class ServerContext;
template <class OutMessage> class ClientAsyncResponseReader;
template <class OutMessage> class ServerAsyncResponseWriter;
}  // namespace grpc
// @@protoc_insertion_point(includes)

namespace cms {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_cms_2eproto();
void protobuf_AssignDesc_cms_2eproto();
void protobuf_ShutdownFile_cms_2eproto();

class Uuid;
class Order;
class Page;
class Query;
class Filter;
class CmdResponse;
class Content;
class ContentList;

enum CmdResponse_Level {
  CmdResponse_Level_DEBUG = 0,
  CmdResponse_Level_INFO = 1,
  CmdResponse_Level_WARN = 2,
  CmdResponse_Level_ERROR = 3,
  CmdResponse_Level_CmdResponse_Level_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CmdResponse_Level_CmdResponse_Level_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CmdResponse_Level_IsValid(int value);
const CmdResponse_Level CmdResponse_Level_Level_MIN = CmdResponse_Level_DEBUG;
const CmdResponse_Level CmdResponse_Level_Level_MAX = CmdResponse_Level_ERROR;
const int CmdResponse_Level_Level_ARRAYSIZE = CmdResponse_Level_Level_MAX + 1;

const ::google::protobuf::EnumDescriptor* CmdResponse_Level_descriptor();
inline const ::std::string& CmdResponse_Level_Name(CmdResponse_Level value) {
  return ::google::protobuf::internal::NameOfEnum(
    CmdResponse_Level_descriptor(), value);
}
inline bool CmdResponse_Level_Parse(
    const ::std::string& name, CmdResponse_Level* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CmdResponse_Level>(
    CmdResponse_Level_descriptor(), name, value);
}
// ===================================================================

class Uuid : public ::google::protobuf::Message {
 public:
  Uuid();
  virtual ~Uuid();

  Uuid(const Uuid& from);

  inline Uuid& operator=(const Uuid& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Uuid& default_instance();

  void UnsafeArenaSwap(Uuid* other);
  void Swap(Uuid* other);

  // implements Message ----------------------------------------------

  inline Uuid* New() const { return New(NULL); }

  Uuid* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Uuid& from);
  void MergeFrom(const Uuid& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Uuid* other);
  protected:
  explicit Uuid(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint64 least_significant_bits = 1;
  inline void clear_least_significant_bits();
  static const int kLeastSignificantBitsFieldNumber = 1;
  inline ::google::protobuf::int64 least_significant_bits() const;
  inline void set_least_significant_bits(::google::protobuf::int64 value);

  // optional sint64 most_significant_bits = 2;
  inline void clear_most_significant_bits();
  static const int kMostSignificantBitsFieldNumber = 2;
  inline ::google::protobuf::int64 most_significant_bits() const;
  inline void set_most_significant_bits(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:cms.Uuid)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  ::google::protobuf::int64 least_significant_bits_;
  ::google::protobuf::int64 most_significant_bits_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_cms_2eproto();
  friend void protobuf_AssignDesc_cms_2eproto();
  friend void protobuf_ShutdownFile_cms_2eproto();

  void InitAsDefaultInstance();
  static Uuid* default_instance_;
};
// -------------------------------------------------------------------

class Order : public ::google::protobuf::Message {
 public:
  Order();
  virtual ~Order();

  Order(const Order& from);

  inline Order& operator=(const Order& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Order& default_instance();

  void UnsafeArenaSwap(Order* other);
  void Swap(Order* other);

  // implements Message ----------------------------------------------

  inline Order* New() const { return New(NULL); }

  Order* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Order& from);
  void MergeFrom(const Order& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Order* other);
  protected:
  explicit Order(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool asc = 1;
  inline void clear_asc();
  static const int kAscFieldNumber = 1;
  inline bool asc() const;
  inline void set_asc(bool value);

  // optional string property = 2;
  inline void clear_property();
  static const int kPropertyFieldNumber = 2;
  inline const ::std::string& property() const;
  inline void set_property(const ::std::string& value);
  inline void set_property(const char* value);
  inline void set_property(const char* value, size_t size);
  inline ::std::string* mutable_property();
  inline ::std::string* release_property();
  inline void set_allocated_property(::std::string* property);
  inline ::std::string* unsafe_arena_release_property();
  inline void unsafe_arena_set_allocated_property(
      ::std::string* property);

  // @@protoc_insertion_point(class_scope:cms.Order)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr property_;
  bool asc_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_cms_2eproto();
  friend void protobuf_AssignDesc_cms_2eproto();
  friend void protobuf_ShutdownFile_cms_2eproto();

  void InitAsDefaultInstance();
  static Order* default_instance_;
};
// -------------------------------------------------------------------

class Page : public ::google::protobuf::Message {
 public:
  Page();
  virtual ~Page();

  Page(const Page& from);

  inline Page& operator=(const Page& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Page& default_instance();

  void UnsafeArenaSwap(Page* other);
  void Swap(Page* other);

  // implements Message ----------------------------------------------

  inline Page* New() const { return New(NULL); }

  Page* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Page& from);
  void MergeFrom(const Page& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Page* other);
  protected:
  explicit Page(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 page = 1;
  inline void clear_page();
  static const int kPageFieldNumber = 1;
  inline ::google::protobuf::uint32 page() const;
  inline void set_page(::google::protobuf::uint32 value);

  // optional uint32 elements = 2;
  inline void clear_elements();
  static const int kElementsFieldNumber = 2;
  inline ::google::protobuf::uint32 elements() const;
  inline void set_elements(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:cms.Page)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  ::google::protobuf::uint32 page_;
  ::google::protobuf::uint32 elements_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_cms_2eproto();
  friend void protobuf_AssignDesc_cms_2eproto();
  friend void protobuf_ShutdownFile_cms_2eproto();

  void InitAsDefaultInstance();
  static Page* default_instance_;
};
// -------------------------------------------------------------------

class Query : public ::google::protobuf::Message {
 public:
  Query();
  virtual ~Query();

  Query(const Query& from);

  inline Query& operator=(const Query& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Query& default_instance();

  void UnsafeArenaSwap(Query* other);
  void Swap(Query* other);

  // implements Message ----------------------------------------------

  inline Query* New() const { return New(NULL); }

  Query* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Query& from);
  void MergeFrom(const Query& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Query* other);
  protected:
  explicit Query(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .cms.Order order = 1;
  inline int order_size() const;
  inline void clear_order();
  static const int kOrderFieldNumber = 1;
  inline const ::cms::Order& order(int index) const;
  inline ::cms::Order* mutable_order(int index);
  inline ::cms::Order* add_order();
  inline const ::google::protobuf::RepeatedPtrField< ::cms::Order >&
      order() const;
  inline ::google::protobuf::RepeatedPtrField< ::cms::Order >*
      mutable_order();

  // repeated .cms.Page page = 2;
  inline int page_size() const;
  inline void clear_page();
  static const int kPageFieldNumber = 2;
  inline const ::cms::Page& page(int index) const;
  inline ::cms::Page* mutable_page(int index);
  inline ::cms::Page* add_page();
  inline const ::google::protobuf::RepeatedPtrField< ::cms::Page >&
      page() const;
  inline ::google::protobuf::RepeatedPtrField< ::cms::Page >*
      mutable_page();

  // @@protoc_insertion_point(class_scope:cms.Query)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::cms::Order > order_;
  ::google::protobuf::RepeatedPtrField< ::cms::Page > page_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_cms_2eproto();
  friend void protobuf_AssignDesc_cms_2eproto();
  friend void protobuf_ShutdownFile_cms_2eproto();

  void InitAsDefaultInstance();
  static Query* default_instance_;
};
// -------------------------------------------------------------------

class Filter : public ::google::protobuf::Message {
 public:
  Filter();
  virtual ~Filter();

  Filter(const Filter& from);

  inline Filter& operator=(const Filter& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Filter& default_instance();

  void UnsafeArenaSwap(Filter* other);
  void Swap(Filter* other);

  // implements Message ----------------------------------------------

  inline Filter* New() const { return New(NULL); }

  Filter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Filter& from);
  void MergeFrom(const Filter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Filter* other);
  protected:
  explicit Filter(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string by = 1;
  inline void clear_by();
  static const int kByFieldNumber = 1;
  inline const ::std::string& by() const;
  inline void set_by(const ::std::string& value);
  inline void set_by(const char* value);
  inline void set_by(const char* value, size_t size);
  inline ::std::string* mutable_by();
  inline ::std::string* release_by();
  inline void set_allocated_by(::std::string* by);
  inline ::std::string* unsafe_arena_release_by();
  inline void unsafe_arena_set_allocated_by(
      ::std::string* by);

  // optional .cms.Order order = 2;
  inline bool has_order() const;
  inline void clear_order();
  static const int kOrderFieldNumber = 2;
  inline const ::cms::Order& order() const;
  inline ::cms::Order* mutable_order();
  inline ::cms::Order* release_order();
  inline void set_allocated_order(::cms::Order* order);
  inline ::cms::Order* unsafe_arena_release_order();
  inline void unsafe_arena_set_allocated_order(
      ::cms::Order* order);

  // @@protoc_insertion_point(class_scope:cms.Filter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr by_;
  ::cms::Order* order_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_cms_2eproto();
  friend void protobuf_AssignDesc_cms_2eproto();
  friend void protobuf_ShutdownFile_cms_2eproto();

  void InitAsDefaultInstance();
  static Filter* default_instance_;
};
// -------------------------------------------------------------------

class CmdResponse : public ::google::protobuf::Message {
 public:
  CmdResponse();
  virtual ~CmdResponse();

  CmdResponse(const CmdResponse& from);

  inline CmdResponse& operator=(const CmdResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const CmdResponse& default_instance();

  void UnsafeArenaSwap(CmdResponse* other);
  void Swap(CmdResponse* other);

  // implements Message ----------------------------------------------

  inline CmdResponse* New() const { return New(NULL); }

  CmdResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CmdResponse& from);
  void MergeFrom(const CmdResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CmdResponse* other);
  protected:
  explicit CmdResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CmdResponse_Level Level;
  static const Level DEBUG = CmdResponse_Level_DEBUG;
  static const Level INFO = CmdResponse_Level_INFO;
  static const Level WARN = CmdResponse_Level_WARN;
  static const Level ERROR = CmdResponse_Level_ERROR;
  static inline bool Level_IsValid(int value) {
    return CmdResponse_Level_IsValid(value);
  }
  static const Level Level_MIN =
    CmdResponse_Level_Level_MIN;
  static const Level Level_MAX =
    CmdResponse_Level_Level_MAX;
  static const int Level_ARRAYSIZE =
    CmdResponse_Level_Level_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Level_descriptor() {
    return CmdResponse_Level_descriptor();
  }
  static inline const ::std::string& Level_Name(Level value) {
    return CmdResponse_Level_Name(value);
  }
  static inline bool Level_Parse(const ::std::string& name,
      Level* value) {
    return CmdResponse_Level_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string path = 1;
  inline void clear_path();
  static const int kPathFieldNumber = 1;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  inline void set_allocated_path(::std::string* path);
  inline ::std::string* unsafe_arena_release_path();
  inline void unsafe_arena_set_allocated_path(
      ::std::string* path);

  // optional .cms.CmdResponse.Level level = 2;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::cms::CmdResponse_Level level() const;
  inline void set_level(::cms::CmdResponse_Level value);

  // @@protoc_insertion_point(class_scope:cms.CmdResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  int level_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_cms_2eproto();
  friend void protobuf_AssignDesc_cms_2eproto();
  friend void protobuf_ShutdownFile_cms_2eproto();

  void InitAsDefaultInstance();
  static CmdResponse* default_instance_;
};
// -------------------------------------------------------------------

class Content : public ::google::protobuf::Message {
 public:
  Content();
  virtual ~Content();

  Content(const Content& from);

  inline Content& operator=(const Content& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Content& default_instance();

  void UnsafeArenaSwap(Content* other);
  void Swap(Content* other);

  // implements Message ----------------------------------------------

  inline Content* New() const { return New(NULL); }

  Content* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Content& from);
  void MergeFrom(const Content& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Content* other);
  protected:
  explicit Content(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cms.Uuid id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::cms::Uuid& id() const;
  inline ::cms::Uuid* mutable_id();
  inline ::cms::Uuid* release_id();
  inline void set_allocated_id(::cms::Uuid* id);
  inline ::cms::Uuid* unsafe_arena_release_id();
  inline void unsafe_arena_set_allocated_id(
      ::cms::Uuid* id);

  // optional string title = 2;
  inline void clear_title();
  static const int kTitleFieldNumber = 2;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);
  inline ::std::string* unsafe_arena_release_title();
  inline void unsafe_arena_set_allocated_title(
      ::std::string* title);

  // optional string description = 3;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 3;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  inline void set_allocated_description(::std::string* description);
  inline ::std::string* unsafe_arena_release_description();
  inline void unsafe_arena_set_allocated_description(
      ::std::string* description);

  // optional uint32 creation_timestamp = 4;
  inline void clear_creation_timestamp();
  static const int kCreationTimestampFieldNumber = 4;
  inline ::google::protobuf::uint32 creation_timestamp() const;
  inline void set_creation_timestamp(::google::protobuf::uint32 value);

  // optional uint32 updated_timestamp = 5;
  inline void clear_updated_timestamp();
  static const int kUpdatedTimestampFieldNumber = 5;
  inline ::google::protobuf::uint32 updated_timestamp() const;
  inline void set_updated_timestamp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:cms.Content)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  ::cms::Uuid* id_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::uint32 creation_timestamp_;
  ::google::protobuf::uint32 updated_timestamp_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_cms_2eproto();
  friend void protobuf_AssignDesc_cms_2eproto();
  friend void protobuf_ShutdownFile_cms_2eproto();

  void InitAsDefaultInstance();
  static Content* default_instance_;
};
// -------------------------------------------------------------------

class ContentList : public ::google::protobuf::Message {
 public:
  ContentList();
  virtual ~ContentList();

  ContentList(const ContentList& from);

  inline ContentList& operator=(const ContentList& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ContentList& default_instance();

  void UnsafeArenaSwap(ContentList* other);
  void Swap(ContentList* other);

  // implements Message ----------------------------------------------

  inline ContentList* New() const { return New(NULL); }

  ContentList* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ContentList& from);
  void MergeFrom(const ContentList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ContentList* other);
  protected:
  explicit ContentList(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .cms.Content contents = 1;
  inline int contents_size() const;
  inline void clear_contents();
  static const int kContentsFieldNumber = 1;
  inline const ::cms::Content& contents(int index) const;
  inline ::cms::Content* mutable_contents(int index);
  inline ::cms::Content* add_contents();
  inline const ::google::protobuf::RepeatedPtrField< ::cms::Content >&
      contents() const;
  inline ::google::protobuf::RepeatedPtrField< ::cms::Content >*
      mutable_contents();

  // @@protoc_insertion_point(class_scope:cms.ContentList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::cms::Content > contents_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_cms_2eproto();
  friend void protobuf_AssignDesc_cms_2eproto();
  friend void protobuf_ShutdownFile_cms_2eproto();

  void InitAsDefaultInstance();
  static ContentList* default_instance_;
};
// ===================================================================


// ===================================================================

// Uuid

// optional sint64 least_significant_bits = 1;
inline void Uuid::clear_least_significant_bits() {
  least_significant_bits_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Uuid::least_significant_bits() const {
  // @@protoc_insertion_point(field_get:cms.Uuid.least_significant_bits)
  return least_significant_bits_;
}
inline void Uuid::set_least_significant_bits(::google::protobuf::int64 value) {
  
  least_significant_bits_ = value;
  // @@protoc_insertion_point(field_set:cms.Uuid.least_significant_bits)
}

// optional sint64 most_significant_bits = 2;
inline void Uuid::clear_most_significant_bits() {
  most_significant_bits_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Uuid::most_significant_bits() const {
  // @@protoc_insertion_point(field_get:cms.Uuid.most_significant_bits)
  return most_significant_bits_;
}
inline void Uuid::set_most_significant_bits(::google::protobuf::int64 value) {
  
  most_significant_bits_ = value;
  // @@protoc_insertion_point(field_set:cms.Uuid.most_significant_bits)
}

// -------------------------------------------------------------------

// Order

// optional bool asc = 1;
inline void Order::clear_asc() {
  asc_ = false;
}
inline bool Order::asc() const {
  // @@protoc_insertion_point(field_get:cms.Order.asc)
  return asc_;
}
inline void Order::set_asc(bool value) {
  
  asc_ = value;
  // @@protoc_insertion_point(field_set:cms.Order.asc)
}

// optional string property = 2;
inline void Order::clear_property() {
  property_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Order::property() const {
  // @@protoc_insertion_point(field_get:cms.Order.property)
  return property_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Order::set_property(const ::std::string& value) {
  
  property_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:cms.Order.property)
}
inline void Order::set_property(const char* value) {
  
  property_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:cms.Order.property)
}
inline void Order::set_property(const char* value,
    size_t size) {
  
  property_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:cms.Order.property)
}
inline ::std::string* Order::mutable_property() {
  
  // @@protoc_insertion_point(field_mutable:cms.Order.property)
  return property_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Order::release_property() {
  
  return property_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Order::unsafe_arena_release_property() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return property_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Order::set_allocated_property(::std::string* property) {
  if (property != NULL) {
    
  } else {
    
  }
  property_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), property,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:cms.Order.property)
}
inline void Order::unsafe_arena_set_allocated_property(
    ::std::string* property) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (property != NULL) {
    
  } else {
    
  }
  
  property_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      property, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:cms.Order.property)
}

// -------------------------------------------------------------------

// Page

// optional uint32 page = 1;
inline void Page::clear_page() {
  page_ = 0u;
}
inline ::google::protobuf::uint32 Page::page() const {
  // @@protoc_insertion_point(field_get:cms.Page.page)
  return page_;
}
inline void Page::set_page(::google::protobuf::uint32 value) {
  
  page_ = value;
  // @@protoc_insertion_point(field_set:cms.Page.page)
}

// optional uint32 elements = 2;
inline void Page::clear_elements() {
  elements_ = 0u;
}
inline ::google::protobuf::uint32 Page::elements() const {
  // @@protoc_insertion_point(field_get:cms.Page.elements)
  return elements_;
}
inline void Page::set_elements(::google::protobuf::uint32 value) {
  
  elements_ = value;
  // @@protoc_insertion_point(field_set:cms.Page.elements)
}

// -------------------------------------------------------------------

// Query

// repeated .cms.Order order = 1;
inline int Query::order_size() const {
  return order_.size();
}
inline void Query::clear_order() {
  order_.Clear();
}
inline const ::cms::Order& Query::order(int index) const {
  // @@protoc_insertion_point(field_get:cms.Query.order)
  return order_.Get(index);
}
inline ::cms::Order* Query::mutable_order(int index) {
  // @@protoc_insertion_point(field_mutable:cms.Query.order)
  return order_.Mutable(index);
}
inline ::cms::Order* Query::add_order() {
  // @@protoc_insertion_point(field_add:cms.Query.order)
  return order_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cms::Order >&
Query::order() const {
  // @@protoc_insertion_point(field_list:cms.Query.order)
  return order_;
}
inline ::google::protobuf::RepeatedPtrField< ::cms::Order >*
Query::mutable_order() {
  // @@protoc_insertion_point(field_mutable_list:cms.Query.order)
  return &order_;
}

// repeated .cms.Page page = 2;
inline int Query::page_size() const {
  return page_.size();
}
inline void Query::clear_page() {
  page_.Clear();
}
inline const ::cms::Page& Query::page(int index) const {
  // @@protoc_insertion_point(field_get:cms.Query.page)
  return page_.Get(index);
}
inline ::cms::Page* Query::mutable_page(int index) {
  // @@protoc_insertion_point(field_mutable:cms.Query.page)
  return page_.Mutable(index);
}
inline ::cms::Page* Query::add_page() {
  // @@protoc_insertion_point(field_add:cms.Query.page)
  return page_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cms::Page >&
Query::page() const {
  // @@protoc_insertion_point(field_list:cms.Query.page)
  return page_;
}
inline ::google::protobuf::RepeatedPtrField< ::cms::Page >*
Query::mutable_page() {
  // @@protoc_insertion_point(field_mutable_list:cms.Query.page)
  return &page_;
}

// -------------------------------------------------------------------

// Filter

// optional string by = 1;
inline void Filter::clear_by() {
  by_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Filter::by() const {
  // @@protoc_insertion_point(field_get:cms.Filter.by)
  return by_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Filter::set_by(const ::std::string& value) {
  
  by_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:cms.Filter.by)
}
inline void Filter::set_by(const char* value) {
  
  by_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:cms.Filter.by)
}
inline void Filter::set_by(const char* value,
    size_t size) {
  
  by_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:cms.Filter.by)
}
inline ::std::string* Filter::mutable_by() {
  
  // @@protoc_insertion_point(field_mutable:cms.Filter.by)
  return by_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Filter::release_by() {
  
  return by_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Filter::unsafe_arena_release_by() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return by_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Filter::set_allocated_by(::std::string* by) {
  if (by != NULL) {
    
  } else {
    
  }
  by_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), by,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:cms.Filter.by)
}
inline void Filter::unsafe_arena_set_allocated_by(
    ::std::string* by) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (by != NULL) {
    
  } else {
    
  }
  
  by_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      by, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:cms.Filter.by)
}

// optional .cms.Order order = 2;
inline bool Filter::has_order() const {
  return !_is_default_instance_ && order_ != NULL;
}
inline void Filter::clear_order() {
  if (order_ != NULL) delete order_;
  order_ = NULL;
}
inline const ::cms::Order& Filter::order() const {
  // @@protoc_insertion_point(field_get:cms.Filter.order)
  return order_ != NULL ? *order_ : *default_instance_->order_;
}
inline ::cms::Order* Filter::mutable_order() {
  
  if (order_ == NULL) {
    order_ = ::google::protobuf::Arena::CreateMessage< ::cms::Order >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cms.Filter.order)
  return order_;
}
inline ::cms::Order* Filter::release_order() {
  
  if (GetArenaNoVirtual() != NULL) {
    if (order_ == NULL) {
      return NULL;
    } else {
      ::cms::Order* temp = new ::cms::Order;
      temp->MergeFrom(*order_);
      order_ = NULL;
      return temp;
    }
  } else {
    ::cms::Order* temp = order_;
    order_ = NULL;
    return temp;
  }
}
inline ::cms::Order* Filter::unsafe_arena_release_order() {
  
  ::cms::Order* temp = order_;
  order_ = NULL;
  return temp;
}
inline void Filter::set_allocated_order(::cms::Order* order) {
  if (GetArenaNoVirtual() == NULL) {
    delete order_;
  }
  if (order != NULL) {
    if (GetArenaNoVirtual() != NULL && 
        ::google::protobuf::Arena::GetArena(order) == NULL) {
      GetArenaNoVirtual()->Own(order);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(order)) {
      ::cms::Order* new_order = 
            ::google::protobuf::Arena::CreateMessage< ::cms::Order >(
            GetArenaNoVirtual());
      new_order->CopyFrom(*order);
      order = new_order;
    }
  }
  order_ = order;
  if (order) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cms.Filter.order)
}
inline void Filter::unsafe_arena_set_allocated_order(
    ::cms::Order* order) {
  if (GetArenaNoVirtual() == NULL) {
    delete order_;
  }
  order_ = order;
  if (order) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cms.Filter.order)
}

// -------------------------------------------------------------------

// CmdResponse

// optional string path = 1;
inline void CmdResponse::clear_path() {
  path_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& CmdResponse::path() const {
  // @@protoc_insertion_point(field_get:cms.CmdResponse.path)
  return path_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CmdResponse::set_path(const ::std::string& value) {
  
  path_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:cms.CmdResponse.path)
}
inline void CmdResponse::set_path(const char* value) {
  
  path_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:cms.CmdResponse.path)
}
inline void CmdResponse::set_path(const char* value,
    size_t size) {
  
  path_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:cms.CmdResponse.path)
}
inline ::std::string* CmdResponse::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:cms.CmdResponse.path)
  return path_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CmdResponse::release_path() {
  
  return path_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CmdResponse::unsafe_arena_release_path() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return path_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void CmdResponse::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:cms.CmdResponse.path)
}
inline void CmdResponse::unsafe_arena_set_allocated_path(
    ::std::string* path) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (path != NULL) {
    
  } else {
    
  }
  
  path_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      path, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:cms.CmdResponse.path)
}

// optional .cms.CmdResponse.Level level = 2;
inline void CmdResponse::clear_level() {
  level_ = 0;
}
inline ::cms::CmdResponse_Level CmdResponse::level() const {
  // @@protoc_insertion_point(field_get:cms.CmdResponse.level)
  return static_cast< ::cms::CmdResponse_Level >(level_);
}
inline void CmdResponse::set_level(::cms::CmdResponse_Level value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:cms.CmdResponse.level)
}

// -------------------------------------------------------------------

// Content

// optional .cms.Uuid id = 1;
inline bool Content::has_id() const {
  return !_is_default_instance_ && id_ != NULL;
}
inline void Content::clear_id() {
  if (id_ != NULL) delete id_;
  id_ = NULL;
}
inline const ::cms::Uuid& Content::id() const {
  // @@protoc_insertion_point(field_get:cms.Content.id)
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
inline ::cms::Uuid* Content::mutable_id() {
  
  if (id_ == NULL) {
    id_ = ::google::protobuf::Arena::CreateMessage< ::cms::Uuid >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:cms.Content.id)
  return id_;
}
inline ::cms::Uuid* Content::release_id() {
  
  if (GetArenaNoVirtual() != NULL) {
    if (id_ == NULL) {
      return NULL;
    } else {
      ::cms::Uuid* temp = new ::cms::Uuid;
      temp->MergeFrom(*id_);
      id_ = NULL;
      return temp;
    }
  } else {
    ::cms::Uuid* temp = id_;
    id_ = NULL;
    return temp;
  }
}
inline ::cms::Uuid* Content::unsafe_arena_release_id() {
  
  ::cms::Uuid* temp = id_;
  id_ = NULL;
  return temp;
}
inline void Content::set_allocated_id(::cms::Uuid* id) {
  if (GetArenaNoVirtual() == NULL) {
    delete id_;
  }
  if (id != NULL) {
    if (GetArenaNoVirtual() != NULL && 
        ::google::protobuf::Arena::GetArena(id) == NULL) {
      GetArenaNoVirtual()->Own(id);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(id)) {
      ::cms::Uuid* new_id = 
            ::google::protobuf::Arena::CreateMessage< ::cms::Uuid >(
            GetArenaNoVirtual());
      new_id->CopyFrom(*id);
      id = new_id;
    }
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cms.Content.id)
}
inline void Content::unsafe_arena_set_allocated_id(
    ::cms::Uuid* id) {
  if (GetArenaNoVirtual() == NULL) {
    delete id_;
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cms.Content.id)
}

// optional string title = 2;
inline void Content::clear_title() {
  title_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Content::title() const {
  // @@protoc_insertion_point(field_get:cms.Content.title)
  return title_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Content::set_title(const ::std::string& value) {
  
  title_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:cms.Content.title)
}
inline void Content::set_title(const char* value) {
  
  title_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:cms.Content.title)
}
inline void Content::set_title(const char* value,
    size_t size) {
  
  title_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:cms.Content.title)
}
inline ::std::string* Content::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:cms.Content.title)
  return title_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Content::release_title() {
  
  return title_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Content::unsafe_arena_release_title() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return title_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Content::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:cms.Content.title)
}
inline void Content::unsafe_arena_set_allocated_title(
    ::std::string* title) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (title != NULL) {
    
  } else {
    
  }
  
  title_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      title, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:cms.Content.title)
}

// optional string description = 3;
inline void Content::clear_description() {
  description_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Content::description() const {
  // @@protoc_insertion_point(field_get:cms.Content.description)
  return description_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Content::set_description(const ::std::string& value) {
  
  description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:cms.Content.description)
}
inline void Content::set_description(const char* value) {
  
  description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:cms.Content.description)
}
inline void Content::set_description(const char* value,
    size_t size) {
  
  description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:cms.Content.description)
}
inline ::std::string* Content::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:cms.Content.description)
  return description_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Content::release_description() {
  
  return description_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Content::unsafe_arena_release_description() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return description_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Content::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:cms.Content.description)
}
inline void Content::unsafe_arena_set_allocated_description(
    ::std::string* description) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (description != NULL) {
    
  } else {
    
  }
  
  description_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      description, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:cms.Content.description)
}

// optional uint32 creation_timestamp = 4;
inline void Content::clear_creation_timestamp() {
  creation_timestamp_ = 0u;
}
inline ::google::protobuf::uint32 Content::creation_timestamp() const {
  // @@protoc_insertion_point(field_get:cms.Content.creation_timestamp)
  return creation_timestamp_;
}
inline void Content::set_creation_timestamp(::google::protobuf::uint32 value) {
  
  creation_timestamp_ = value;
  // @@protoc_insertion_point(field_set:cms.Content.creation_timestamp)
}

// optional uint32 updated_timestamp = 5;
inline void Content::clear_updated_timestamp() {
  updated_timestamp_ = 0u;
}
inline ::google::protobuf::uint32 Content::updated_timestamp() const {
  // @@protoc_insertion_point(field_get:cms.Content.updated_timestamp)
  return updated_timestamp_;
}
inline void Content::set_updated_timestamp(::google::protobuf::uint32 value) {
  
  updated_timestamp_ = value;
  // @@protoc_insertion_point(field_set:cms.Content.updated_timestamp)
}

// -------------------------------------------------------------------

// ContentList

// repeated .cms.Content contents = 1;
inline int ContentList::contents_size() const {
  return contents_.size();
}
inline void ContentList::clear_contents() {
  contents_.Clear();
}
inline const ::cms::Content& ContentList::contents(int index) const {
  // @@protoc_insertion_point(field_get:cms.ContentList.contents)
  return contents_.Get(index);
}
inline ::cms::Content* ContentList::mutable_contents(int index) {
  // @@protoc_insertion_point(field_mutable:cms.ContentList.contents)
  return contents_.Mutable(index);
}
inline ::cms::Content* ContentList::add_contents() {
  // @@protoc_insertion_point(field_add:cms.ContentList.contents)
  return contents_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cms::Content >&
ContentList::contents() const {
  // @@protoc_insertion_point(field_list:cms.ContentList.contents)
  return contents_;
}
inline ::google::protobuf::RepeatedPtrField< ::cms::Content >*
ContentList::mutable_contents() {
  // @@protoc_insertion_point(field_mutable_list:cms.ContentList.contents)
  return &contents_;
}


class ContentCmdHandler GRPC_FINAL {
 public:
  class Stub GRPC_FINAL : public ::grpc::InternalStub {
   public:
    ::grpc::Status Create(::grpc::ClientContext* context, const ::cms::Content& request, ::cms::CmdResponse* response);
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cms::CmdResponse>> AsyncCreate(::grpc::ClientContext* context, const ::cms::Content& request, ::grpc::CompletionQueue* cq, void* tag);
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);

  class Service : public ::grpc::SynchronousService {
   public:
    Service() : service_(nullptr) {}
    virtual ~Service();
    virtual ::grpc::Status Create(::grpc::ServerContext* context, const ::cms::Content* request, ::cms::CmdResponse* response);
    ::grpc::RpcService* service() GRPC_OVERRIDE GRPC_FINAL;
   private:
    ::grpc::RpcService* service_;
  };
  class AsyncService GRPC_FINAL : public ::grpc::AsynchronousService {
   public:
    explicit AsyncService(::grpc::CompletionQueue* cq);
    ~AsyncService() {};
    void RequestCreate(::grpc::ServerContext* context, ::cms::Content* request, ::grpc::ServerAsyncResponseWriter< ::cms::CmdResponse>* response, ::grpc::CompletionQueue* cq, void *tag);
  };
};

class CmsQuery GRPC_FINAL {
 public:
  class Stub GRPC_FINAL : public ::grpc::InternalStub {
   public:
    ::grpc::Status get(::grpc::ClientContext* context, const ::cms::Uuid& request, ::cms::Content* response);
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cms::Content>> Asyncget(::grpc::ClientContext* context, const ::cms::Uuid& request, ::grpc::CompletionQueue* cq, void* tag);
    ::grpc::Status get_all(::grpc::ClientContext* context, const ::cms::Query& request, ::cms::ContentList* response);
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cms::ContentList>> Asyncget_all(::grpc::ClientContext* context, const ::cms::Query& request, ::grpc::CompletionQueue* cq, void* tag);
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);

  class Service : public ::grpc::SynchronousService {
   public:
    Service() : service_(nullptr) {}
    virtual ~Service();
    virtual ::grpc::Status get(::grpc::ServerContext* context, const ::cms::Uuid* request, ::cms::Content* response);
    virtual ::grpc::Status get_all(::grpc::ServerContext* context, const ::cms::Query* request, ::cms::ContentList* response);
    ::grpc::RpcService* service() GRPC_OVERRIDE GRPC_FINAL;
   private:
    ::grpc::RpcService* service_;
  };
  class AsyncService GRPC_FINAL : public ::grpc::AsynchronousService {
   public:
    explicit AsyncService(::grpc::CompletionQueue* cq);
    ~AsyncService() {};
    void Requestget(::grpc::ServerContext* context, ::cms::Uuid* request, ::grpc::ServerAsyncResponseWriter< ::cms::Content>* response, ::grpc::CompletionQueue* cq, void *tag);
    void Requestget_all(::grpc::ServerContext* context, ::cms::Query* request, ::grpc::ServerAsyncResponseWriter< ::cms::ContentList>* response, ::grpc::CompletionQueue* cq, void *tag);
  };
};

// @@protoc_insertion_point(namespace_scope)

}  // namespace cms

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::cms::CmdResponse_Level> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cms::CmdResponse_Level>() {
  return ::cms::CmdResponse_Level_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cms_2eproto__INCLUDED
