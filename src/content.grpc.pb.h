// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: content.proto
#ifndef GRPC_content_2eproto__INCLUDED
#define GRPC_content_2eproto__INCLUDED

#include "content.pb.h"

#include <grpc++/impl/internal_stub.h>
#include <grpc++/impl/rpc_method.h>
#include <grpc++/impl/service_type.h>
#include <grpc++/status.h>

namespace grpc {
class CompletionQueue;
class ChannelInterface;
class RpcService;
class ServerContext;
template <class OutMessage> class ClientAsyncResponseReader;
template <class OutMessage> class ServerAsyncResponseWriter;
}  // namespace grpc

namespace content {

class ContentCmdHandler GRPC_FINAL {
 public:
  class Stub GRPC_FINAL : public ::grpc::InternalStub {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status save(::grpc::ClientContext* context, const ::content::Content& request, ::content::CmdResponse* response);
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::content::CmdResponse>> Asyncsave(::grpc::ClientContext* context, const ::content::Content& request, ::grpc::CompletionQueue* cq, void* tag);
    ::grpc::Status remove(::grpc::ClientContext* context, const ::content::Uuid& request, ::content::CmdResponse* response);
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::content::CmdResponse>> Asyncremove(::grpc::ClientContext* context, const ::content::Uuid& request, ::grpc::CompletionQueue* cq, void* tag);
    ::grpc::Status removePart(::grpc::ClientContext* context, const ::content::Uuid& request, ::content::CmdResponse* response);
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::content::CmdResponse>> AsyncremovePart(::grpc::ClientContext* context, const ::content::Uuid& request, ::grpc::CompletionQueue* cq, void* tag);
    ::grpc::Status updatePart(::grpc::ClientContext* context, const ::content::UpdatePart& request, ::content::CmdResponse* response);
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::content::CmdResponse>> AsyncupdatePart(::grpc::ClientContext* context, const ::content::UpdatePart& request, ::grpc::CompletionQueue* cq, void* tag);
   private:
    const ::grpc::RpcMethod rpcmethod_save_;
    const ::grpc::RpcMethod rpcmethod_remove_;
    const ::grpc::RpcMethod rpcmethod_removePart_;
    const ::grpc::RpcMethod rpcmethod_updatePart_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);

  class Service : public ::grpc::SynchronousService {
   public:
    Service() : service_(nullptr) {}
    virtual ~Service();
    virtual ::grpc::Status save(::grpc::ServerContext* context, const ::content::Content* request, ::content::CmdResponse* response);
    virtual ::grpc::Status remove(::grpc::ServerContext* context, const ::content::Uuid* request, ::content::CmdResponse* response);
    virtual ::grpc::Status removePart(::grpc::ServerContext* context, const ::content::Uuid* request, ::content::CmdResponse* response);
    virtual ::grpc::Status updatePart(::grpc::ServerContext* context, const ::content::UpdatePart* request, ::content::CmdResponse* response);
    ::grpc::RpcService* service() GRPC_OVERRIDE GRPC_FINAL;
   private:
    ::grpc::RpcService* service_;
  };
  class AsyncService GRPC_FINAL : public ::grpc::AsynchronousService {
   public:
    explicit AsyncService(::grpc::CompletionQueue* cq);
    ~AsyncService() {};
    void Requestsave(::grpc::ServerContext* context, ::content::Content* request, ::grpc::ServerAsyncResponseWriter< ::content::CmdResponse>* response, ::grpc::CompletionQueue* cq, void *tag);
    void Requestremove(::grpc::ServerContext* context, ::content::Uuid* request, ::grpc::ServerAsyncResponseWriter< ::content::CmdResponse>* response, ::grpc::CompletionQueue* cq, void *tag);
    void RequestremovePart(::grpc::ServerContext* context, ::content::Uuid* request, ::grpc::ServerAsyncResponseWriter< ::content::CmdResponse>* response, ::grpc::CompletionQueue* cq, void *tag);
    void RequestupdatePart(::grpc::ServerContext* context, ::content::UpdatePart* request, ::grpc::ServerAsyncResponseWriter< ::content::CmdResponse>* response, ::grpc::CompletionQueue* cq, void *tag);
  };
};

}  // namespace content


#endif  // GRPC_content_2eproto__INCLUDED
