// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: content.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "content.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace content {

namespace {

const ::google::protobuf::Descriptor* Uuid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Uuid_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContentData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContentData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContentPart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContentPart_reflection_ = NULL;
const ::google::protobuf::Descriptor* Content_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Content_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdatePart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdatePart_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Format_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Level_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_content_2eproto() {
  protobuf_AddDesc_content_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "content.proto");
  GOOGLE_CHECK(file != NULL);
  Uuid_descriptor_ = file->message_type(0);
  static const int Uuid_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Uuid, least_significant_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Uuid, most_significant_bits_),
  };
  Uuid_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Uuid_descriptor_,
      Uuid::default_instance_,
      Uuid_offsets_,
      -1,
      -1,
      -1,
      sizeof(Uuid),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Uuid, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Uuid, _is_default_instance_));
  ContentData_descriptor_ = file->message_type(1);
  static const int ContentData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentData, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentData, authors_),
  };
  ContentData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ContentData_descriptor_,
      ContentData::default_instance_,
      ContentData_offsets_,
      -1,
      -1,
      -1,
      sizeof(ContentData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentData, _is_default_instance_));
  ContentPart_descriptor_ = file->message_type(2);
  static const int ContentPart_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentPart, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentPart, format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentPart, data_),
  };
  ContentPart_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ContentPart_descriptor_,
      ContentPart::default_instance_,
      ContentPart_offsets_,
      -1,
      -1,
      -1,
      sizeof(ContentPart),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentPart, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentPart, _is_default_instance_));
  Content_descriptor_ = file->message_type(3);
  static const int Content_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Content, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Content, parts_),
  };
  Content_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Content_descriptor_,
      Content::default_instance_,
      Content_offsets_,
      -1,
      -1,
      -1,
      sizeof(Content),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Content, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Content, _is_default_instance_));
  CmdResponse_descriptor_ = file->message_type(4);
  static const int CmdResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResponse, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResponse, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResponse, msg_),
  };
  CmdResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CmdResponse_descriptor_,
      CmdResponse::default_instance_,
      CmdResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(CmdResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdResponse, _is_default_instance_));
  UpdatePart_descriptor_ = file->message_type(5);
  static const int UpdatePart_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePart, part_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePart, position_),
  };
  UpdatePart_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UpdatePart_descriptor_,
      UpdatePart::default_instance_,
      UpdatePart_offsets_,
      -1,
      -1,
      -1,
      sizeof(UpdatePart),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePart, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePart, _is_default_instance_));
  Format_descriptor_ = file->enum_type(0);
  Level_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_content_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Uuid_descriptor_, &Uuid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ContentData_descriptor_, &ContentData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ContentPart_descriptor_, &ContentPart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Content_descriptor_, &Content::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CmdResponse_descriptor_, &CmdResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UpdatePart_descriptor_, &UpdatePart::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_content_2eproto() {
  delete Uuid::default_instance_;
  delete Uuid_reflection_;
  delete ContentData::default_instance_;
  delete ContentData_reflection_;
  delete ContentPart::default_instance_;
  delete ContentPart_reflection_;
  delete Content::default_instance_;
  delete Content_reflection_;
  delete CmdResponse::default_instance_;
  delete CmdResponse_reflection_;
  delete UpdatePart::default_instance_;
  delete UpdatePart_reflection_;
}

void protobuf_AddDesc_content_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rcontent.proto\022\007content\"E\n\004Uuid\022\036\n\026leas"
    "t_significant_bits\030\001 \001(\022\022\035\n\025most_signifi"
    "cant_bits\030\002 \001(\022\"W\n\013ContentData\022\031\n\002id\030\001 \001"
    "(\0132\r.content.Uuid\022\r\n\005title\030\002 \001(\t\022\036\n\007auth"
    "ors\030\003 \003(\0132\r.content.Uuid\"`\n\013ContentPart\022"
    "\"\n\004info\030\001 \001(\0132\024.content.ContentData\022\037\n\006f"
    "ormat\030\002 \001(\0162\017.content.Format\022\014\n\004data\030\003 \001"
    "(\t\"R\n\007Content\022\"\n\004info\030\001 \001(\0132\024.content.Co"
    "ntentData\022#\n\005parts\030\002 \003(\0132\024.content.Conte"
    "ntPart\"G\n\013CmdResponse\022\014\n\004path\030\001 \001(\t\022\035\n\005l"
    "evel\030\002 \001(\0162\016.content.Level\022\013\n\003msg\030\003 \001(\t\""
    "B\n\nUpdatePart\022\"\n\004part\030\001 \001(\0132\024.content.Co"
    "ntentPart\022\020\n\010position\030\002 \001(\r*\?\n\006Format\022\010\n"
    "\004HTML\020\000\022\006\n\002MD\020\001\022\007\n\003RST\020\002\022\007\n\003SRC\020\003\022\007\n\003IMG"
    "\020\004\022\010\n\004GIST\020\005*1\n\005Level\022\t\n\005DEBUG\020\000\022\010\n\004INFO"
    "\020\001\022\010\n\004WARN\020\002\022\t\n\005ERROR\020\0032\346\001\n\021ContentCmdHa"
    "ndler\0220\n\004save\022\020.content.Content\032\024.conten"
    "t.CmdResponse\"\000\022/\n\006remove\022\r.content.Uuid"
    "\032\024.content.CmdResponse\"\000\0223\n\nremovePart\022\r"
    ".content.Uuid\032\024.content.CmdResponse\"\000\0229\n"
    "\nupdatePart\022\023.content.UpdatePart\032\024.conte"
    "nt.CmdResponse\"\000B\020\n\013com.content\370\001\001b\006prot"
    "o3", 882);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "content.proto", &protobuf_RegisterTypes);
  Uuid::default_instance_ = new Uuid();
  ContentData::default_instance_ = new ContentData();
  ContentPart::default_instance_ = new ContentPart();
  Content::default_instance_ = new Content();
  CmdResponse::default_instance_ = new CmdResponse();
  UpdatePart::default_instance_ = new UpdatePart();
  Uuid::default_instance_->InitAsDefaultInstance();
  ContentData::default_instance_->InitAsDefaultInstance();
  ContentPart::default_instance_->InitAsDefaultInstance();
  Content::default_instance_->InitAsDefaultInstance();
  CmdResponse::default_instance_->InitAsDefaultInstance();
  UpdatePart::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_content_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_content_2eproto {
  StaticDescriptorInitializer_content_2eproto() {
    protobuf_AddDesc_content_2eproto();
  }
} static_descriptor_initializer_content_2eproto_;
const ::google::protobuf::EnumDescriptor* Format_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Format_descriptor_;
}
bool Format_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Level_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Level_descriptor_;
}
bool Level_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int Uuid::kLeastSignificantBitsFieldNumber;
const int Uuid::kMostSignificantBitsFieldNumber;
#endif  // !_MSC_VER

Uuid::Uuid()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:content.Uuid)
}

Uuid::Uuid(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:content.Uuid)
}

void Uuid::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Uuid::Uuid(const Uuid& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:content.Uuid)
}

void Uuid::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  least_significant_bits_ = GOOGLE_LONGLONG(0);
  most_significant_bits_ = GOOGLE_LONGLONG(0);
}

Uuid::~Uuid() {
  // @@protoc_insertion_point(destructor:content.Uuid)
  SharedDtor();
}

void Uuid::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
  }
}

void Uuid::ArenaDtor(void* object) {
  Uuid* _this = reinterpret_cast< Uuid* >(object);
  (void)_this;
}
void Uuid::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Uuid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Uuid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Uuid_descriptor_;
}

const Uuid& Uuid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_content_2eproto();
  return *default_instance_;
}

Uuid* Uuid::default_instance_ = NULL;

Uuid* Uuid::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Uuid>(arena);
}

void Uuid::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Uuid*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(least_significant_bits_, most_significant_bits_);

#undef OFFSET_OF_FIELD_
#undef ZR_

}

bool Uuid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:content.Uuid)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint64 least_significant_bits = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &least_significant_bits_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_most_significant_bits;
        break;
      }

      // optional sint64 most_significant_bits = 2;
      case 2: {
        if (tag == 16) {
         parse_most_significant_bits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &most_significant_bits_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:content.Uuid)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:content.Uuid)
  return false;
#undef DO_
}

void Uuid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:content.Uuid)
  // optional sint64 least_significant_bits = 1;
  if (this->least_significant_bits() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->least_significant_bits(), output);
  }

  // optional sint64 most_significant_bits = 2;
  if (this->most_significant_bits() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->most_significant_bits(), output);
  }

  // @@protoc_insertion_point(serialize_end:content.Uuid)
}

::google::protobuf::uint8* Uuid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:content.Uuid)
  // optional sint64 least_significant_bits = 1;
  if (this->least_significant_bits() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->least_significant_bits(), target);
  }

  // optional sint64 most_significant_bits = 2;
  if (this->most_significant_bits() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->most_significant_bits(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:content.Uuid)
  return target;
}

int Uuid::ByteSize() const {
  int total_size = 0;

  // optional sint64 least_significant_bits = 1;
  if (this->least_significant_bits() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->least_significant_bits());
  }

  // optional sint64 most_significant_bits = 2;
  if (this->most_significant_bits() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->most_significant_bits());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Uuid::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Uuid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Uuid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Uuid::MergeFrom(const Uuid& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.least_significant_bits() != 0) {
    set_least_significant_bits(from.least_significant_bits());
  }
  if (from.most_significant_bits() != 0) {
    set_most_significant_bits(from.most_significant_bits());
  }
}

void Uuid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Uuid::CopyFrom(const Uuid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Uuid::IsInitialized() const {

  return true;
}

void Uuid::Swap(Uuid* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Uuid temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void Uuid::UnsafeArenaSwap(Uuid* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Uuid::InternalSwap(Uuid* other) {
  std::swap(least_significant_bits_, other->least_significant_bits_);
  std::swap(most_significant_bits_, other->most_significant_bits_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Uuid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Uuid_descriptor_;
  metadata.reflection = Uuid_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContentData::kIdFieldNumber;
const int ContentData::kTitleFieldNumber;
const int ContentData::kAuthorsFieldNumber;
#endif  // !_MSC_VER

ContentData::ContentData()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:content.ContentData)
}

ContentData::ContentData(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  authors_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:content.ContentData)
}

void ContentData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  id_ = const_cast< ::content::Uuid*>(&::content::Uuid::default_instance());
}

ContentData::ContentData(const ContentData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:content.ContentData)
}

void ContentData::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = NULL;
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ContentData::~ContentData() {
  // @@protoc_insertion_point(destructor:content.ContentData)
  SharedDtor();
}

void ContentData::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  title_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
    delete id_;
  }
}

void ContentData::ArenaDtor(void* object) {
  ContentData* _this = reinterpret_cast< ContentData* >(object);
  (void)_this;
}
void ContentData::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ContentData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContentData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContentData_descriptor_;
}

const ContentData& ContentData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_content_2eproto();
  return *default_instance_;
}

ContentData* ContentData::default_instance_ = NULL;

ContentData* ContentData::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ContentData>(arena);
}

void ContentData::Clear() {
  if (id_ != NULL) delete id_;
  id_ = NULL;
  title_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  authors_.Clear();
}

bool ContentData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:content.ContentData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .content.Uuid id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_title;
        break;
      }

      // optional string title = 2;
      case 2: {
        if (tag == 18) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content.ContentData.title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_authors;
        break;
      }

      // repeated .content.Uuid authors = 3;
      case 3: {
        if (tag == 26) {
         parse_authors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_authors()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_authors;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:content.ContentData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:content.ContentData)
  return false;
#undef DO_
}

void ContentData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:content.ContentData)
  // optional .content.Uuid id = 1;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  // optional string title = 2;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content.ContentData.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  // repeated .content.Uuid authors = 3;
  for (unsigned int i = 0, n = this->authors_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->authors(i), output);
  }

  // @@protoc_insertion_point(serialize_end:content.ContentData)
}

::google::protobuf::uint8* ContentData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:content.ContentData)
  // optional .content.Uuid id = 1;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->id_, target);
  }

  // optional string title = 2;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content.ContentData.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  // repeated .content.Uuid authors = 3;
  for (unsigned int i = 0, n = this->authors_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->authors(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:content.ContentData)
  return target;
}

int ContentData::ByteSize() const {
  int total_size = 0;

  // optional .content.Uuid id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->id_);
  }

  // optional string title = 2;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());
  }

  // repeated .content.Uuid authors = 3;
  total_size += 1 * this->authors_size();
  for (int i = 0; i < this->authors_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->authors(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContentData::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ContentData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContentData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContentData::MergeFrom(const ContentData& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  authors_.MergeFrom(from.authors_);
  if (from.has_id()) {
    mutable_id()->::content::Uuid::MergeFrom(from.id());
  }
  if (from.title().size() > 0) {
    set_title(from.title());
  }
}

void ContentData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContentData::CopyFrom(const ContentData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContentData::IsInitialized() const {

  return true;
}

void ContentData::Swap(ContentData* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ContentData temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void ContentData::UnsafeArenaSwap(ContentData* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ContentData::InternalSwap(ContentData* other) {
  std::swap(id_, other->id_);
  title_.Swap(&other->title_);
  authors_.UnsafeArenaSwap(&other->authors_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ContentData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContentData_descriptor_;
  metadata.reflection = ContentData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContentPart::kInfoFieldNumber;
const int ContentPart::kFormatFieldNumber;
const int ContentPart::kDataFieldNumber;
#endif  // !_MSC_VER

ContentPart::ContentPart()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:content.ContentPart)
}

ContentPart::ContentPart(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:content.ContentPart)
}

void ContentPart::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  info_ = const_cast< ::content::ContentData*>(&::content::ContentData::default_instance());
}

ContentPart::ContentPart(const ContentPart& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:content.ContentPart)
}

void ContentPart::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  info_ = NULL;
  format_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ContentPart::~ContentPart() {
  // @@protoc_insertion_point(destructor:content.ContentPart)
  SharedDtor();
}

void ContentPart::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  data_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
    delete info_;
  }
}

void ContentPart::ArenaDtor(void* object) {
  ContentPart* _this = reinterpret_cast< ContentPart* >(object);
  (void)_this;
}
void ContentPart::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ContentPart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContentPart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContentPart_descriptor_;
}

const ContentPart& ContentPart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_content_2eproto();
  return *default_instance_;
}

ContentPart* ContentPart::default_instance_ = NULL;

ContentPart* ContentPart::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ContentPart>(arena);
}

void ContentPart::Clear() {
  if (info_ != NULL) delete info_;
  info_ = NULL;
  format_ = 0;
  data_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool ContentPart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:content.ContentPart)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .content.ContentData info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_format;
        break;
      }

      // optional .content.Format format = 2;
      case 2: {
        if (tag == 16) {
         parse_format:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_format(static_cast< ::content::Format >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional string data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content.ContentPart.data");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:content.ContentPart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:content.ContentPart)
  return false;
#undef DO_
}

void ContentPart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:content.ContentPart)
  // optional .content.ContentData info = 1;
  if (this->has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->info_, output);
  }

  // optional .content.Format format = 2;
  if (this->format() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->format(), output);
  }

  // optional string data = 3;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content.ContentPart.data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:content.ContentPart)
}

::google::protobuf::uint8* ContentPart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:content.ContentPart)
  // optional .content.ContentData info = 1;
  if (this->has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->info_, target);
  }

  // optional .content.Format format = 2;
  if (this->format() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->format(), target);
  }

  // optional string data = 3;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content.ContentPart.data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:content.ContentPart)
  return target;
}

int ContentPart::ByteSize() const {
  int total_size = 0;

  // optional .content.ContentData info = 1;
  if (this->has_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->info_);
  }

  // optional .content.Format format = 2;
  if (this->format() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->format());
  }

  // optional string data = 3;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContentPart::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ContentPart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContentPart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContentPart::MergeFrom(const ContentPart& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_info()) {
    mutable_info()->::content::ContentData::MergeFrom(from.info());
  }
  if (from.format() != 0) {
    set_format(from.format());
  }
  if (from.data().size() > 0) {
    set_data(from.data());
  }
}

void ContentPart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContentPart::CopyFrom(const ContentPart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContentPart::IsInitialized() const {

  return true;
}

void ContentPart::Swap(ContentPart* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ContentPart temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void ContentPart::UnsafeArenaSwap(ContentPart* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ContentPart::InternalSwap(ContentPart* other) {
  std::swap(info_, other->info_);
  std::swap(format_, other->format_);
  data_.Swap(&other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ContentPart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContentPart_descriptor_;
  metadata.reflection = ContentPart_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Content::kInfoFieldNumber;
const int Content::kPartsFieldNumber;
#endif  // !_MSC_VER

Content::Content()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:content.Content)
}

Content::Content(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  parts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:content.Content)
}

void Content::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  info_ = const_cast< ::content::ContentData*>(&::content::ContentData::default_instance());
}

Content::Content(const Content& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:content.Content)
}

void Content::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  info_ = NULL;
}

Content::~Content() {
  // @@protoc_insertion_point(destructor:content.Content)
  SharedDtor();
}

void Content::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
    delete info_;
  }
}

void Content::ArenaDtor(void* object) {
  Content* _this = reinterpret_cast< Content* >(object);
  (void)_this;
}
void Content::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Content::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Content::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Content_descriptor_;
}

const Content& Content::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_content_2eproto();
  return *default_instance_;
}

Content* Content::default_instance_ = NULL;

Content* Content::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Content>(arena);
}

void Content::Clear() {
  if (info_ != NULL) delete info_;
  info_ = NULL;
  parts_.Clear();
}

bool Content::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:content.Content)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .content.ContentData info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_parts;
        break;
      }

      // repeated .content.ContentPart parts = 2;
      case 2: {
        if (tag == 18) {
         parse_parts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_parts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_parts;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:content.Content)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:content.Content)
  return false;
#undef DO_
}

void Content::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:content.Content)
  // optional .content.ContentData info = 1;
  if (this->has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->info_, output);
  }

  // repeated .content.ContentPart parts = 2;
  for (unsigned int i = 0, n = this->parts_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->parts(i), output);
  }

  // @@protoc_insertion_point(serialize_end:content.Content)
}

::google::protobuf::uint8* Content::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:content.Content)
  // optional .content.ContentData info = 1;
  if (this->has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->info_, target);
  }

  // repeated .content.ContentPart parts = 2;
  for (unsigned int i = 0, n = this->parts_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->parts(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:content.Content)
  return target;
}

int Content::ByteSize() const {
  int total_size = 0;

  // optional .content.ContentData info = 1;
  if (this->has_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->info_);
  }

  // repeated .content.ContentPart parts = 2;
  total_size += 1 * this->parts_size();
  for (int i = 0; i < this->parts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->parts(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Content::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Content* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Content*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Content::MergeFrom(const Content& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  parts_.MergeFrom(from.parts_);
  if (from.has_info()) {
    mutable_info()->::content::ContentData::MergeFrom(from.info());
  }
}

void Content::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Content::CopyFrom(const Content& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Content::IsInitialized() const {

  return true;
}

void Content::Swap(Content* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Content temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void Content::UnsafeArenaSwap(Content* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Content::InternalSwap(Content* other) {
  std::swap(info_, other->info_);
  parts_.UnsafeArenaSwap(&other->parts_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Content::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Content_descriptor_;
  metadata.reflection = Content_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CmdResponse::kPathFieldNumber;
const int CmdResponse::kLevelFieldNumber;
const int CmdResponse::kMsgFieldNumber;
#endif  // !_MSC_VER

CmdResponse::CmdResponse()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:content.CmdResponse)
}

CmdResponse::CmdResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:content.CmdResponse)
}

void CmdResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CmdResponse::CmdResponse(const CmdResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:content.CmdResponse)
}

void CmdResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level_ = 0;
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CmdResponse::~CmdResponse() {
  // @@protoc_insertion_point(destructor:content.CmdResponse)
  SharedDtor();
}

void CmdResponse::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  path_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  msg_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
  }
}

void CmdResponse::ArenaDtor(void* object) {
  CmdResponse* _this = reinterpret_cast< CmdResponse* >(object);
  (void)_this;
}
void CmdResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CmdResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdResponse_descriptor_;
}

const CmdResponse& CmdResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_content_2eproto();
  return *default_instance_;
}

CmdResponse* CmdResponse::default_instance_ = NULL;

CmdResponse* CmdResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<CmdResponse>(arena);
}

void CmdResponse::Clear() {
  path_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  level_ = 0;
  msg_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool CmdResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:content.CmdResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content.CmdResponse.path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional .content.Level level = 2;
      case 2: {
        if (tag == 16) {
         parse_level:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_level(static_cast< ::content::Level >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_msg;
        break;
      }

      // optional string msg = 3;
      case 3: {
        if (tag == 26) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content.CmdResponse.msg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:content.CmdResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:content.CmdResponse)
  return false;
#undef DO_
}

void CmdResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:content.CmdResponse)
  // optional string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content.CmdResponse.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // optional .content.Level level = 2;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->level(), output);
  }

  // optional string msg = 3;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content.CmdResponse.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->msg(), output);
  }

  // @@protoc_insertion_point(serialize_end:content.CmdResponse)
}

::google::protobuf::uint8* CmdResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:content.CmdResponse)
  // optional string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content.CmdResponse.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // optional .content.Level level = 2;
  if (this->level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->level(), target);
  }

  // optional string msg = 3;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content.CmdResponse.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->msg(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:content.CmdResponse)
  return target;
}

int CmdResponse::ByteSize() const {
  int total_size = 0;

  // optional string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  // optional .content.Level level = 2;
  if (this->level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->level());
  }

  // optional string msg = 3;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CmdResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdResponse::MergeFrom(const CmdResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.path().size() > 0) {
    set_path(from.path());
  }
  if (from.level() != 0) {
    set_level(from.level());
  }
  if (from.msg().size() > 0) {
    set_msg(from.msg());
  }
}

void CmdResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdResponse::CopyFrom(const CmdResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdResponse::IsInitialized() const {

  return true;
}

void CmdResponse::Swap(CmdResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CmdResponse temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void CmdResponse::UnsafeArenaSwap(CmdResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CmdResponse::InternalSwap(CmdResponse* other) {
  path_.Swap(&other->path_);
  std::swap(level_, other->level_);
  msg_.Swap(&other->msg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CmdResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdResponse_descriptor_;
  metadata.reflection = CmdResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdatePart::kPartFieldNumber;
const int UpdatePart::kPositionFieldNumber;
#endif  // !_MSC_VER

UpdatePart::UpdatePart()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:content.UpdatePart)
}

UpdatePart::UpdatePart(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:content.UpdatePart)
}

void UpdatePart::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  part_ = const_cast< ::content::ContentPart*>(&::content::ContentPart::default_instance());
}

UpdatePart::UpdatePart(const UpdatePart& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:content.UpdatePart)
}

void UpdatePart::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  part_ = NULL;
  position_ = 0u;
}

UpdatePart::~UpdatePart() {
  // @@protoc_insertion_point(destructor:content.UpdatePart)
  SharedDtor();
}

void UpdatePart::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
    delete part_;
  }
}

void UpdatePart::ArenaDtor(void* object) {
  UpdatePart* _this = reinterpret_cast< UpdatePart* >(object);
  (void)_this;
}
void UpdatePart::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UpdatePart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdatePart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdatePart_descriptor_;
}

const UpdatePart& UpdatePart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_content_2eproto();
  return *default_instance_;
}

UpdatePart* UpdatePart::default_instance_ = NULL;

UpdatePart* UpdatePart::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UpdatePart>(arena);
}

void UpdatePart::Clear() {
  if (part_ != NULL) delete part_;
  part_ = NULL;
  position_ = 0u;
}

bool UpdatePart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:content.UpdatePart)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .content.ContentPart part = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_part()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_position;
        break;
      }

      // optional uint32 position = 2;
      case 2: {
        if (tag == 16) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:content.UpdatePart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:content.UpdatePart)
  return false;
#undef DO_
}

void UpdatePart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:content.UpdatePart)
  // optional .content.ContentPart part = 1;
  if (this->has_part()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->part_, output);
  }

  // optional uint32 position = 2;
  if (this->position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->position(), output);
  }

  // @@protoc_insertion_point(serialize_end:content.UpdatePart)
}

::google::protobuf::uint8* UpdatePart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:content.UpdatePart)
  // optional .content.ContentPart part = 1;
  if (this->has_part()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->part_, target);
  }

  // optional uint32 position = 2;
  if (this->position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->position(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:content.UpdatePart)
  return target;
}

int UpdatePart::ByteSize() const {
  int total_size = 0;

  // optional .content.ContentPart part = 1;
  if (this->has_part()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->part_);
  }

  // optional uint32 position = 2;
  if (this->position() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->position());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdatePart::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UpdatePart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdatePart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdatePart::MergeFrom(const UpdatePart& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_part()) {
    mutable_part()->::content::ContentPart::MergeFrom(from.part());
  }
  if (from.position() != 0) {
    set_position(from.position());
  }
}

void UpdatePart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdatePart::CopyFrom(const UpdatePart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdatePart::IsInitialized() const {

  return true;
}

void UpdatePart::Swap(UpdatePart* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UpdatePart temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void UpdatePart::UnsafeArenaSwap(UpdatePart* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UpdatePart::InternalSwap(UpdatePart* other) {
  std::swap(part_, other->part_);
  std::swap(position_, other->position_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdatePart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdatePart_descriptor_;
  metadata.reflection = UpdatePart_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace content

// @@protoc_insertion_point(global_scope)
