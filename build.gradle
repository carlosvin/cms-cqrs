apply plugin: 'cpp'
apply plugin: 'eclipse'

def base_dir = "/usr/local"

def libgpr = 'libgpr.a'
def libgrpc = 'libgrpc.a'
def libgrpcpp = 'libgrpc++_unsecure.a'
def libprotobuf = "libprotobuf.a"


binaries.all {
	cppCompiler.args "-std=c++11"
	linker.args "-L/usr/local/lib" //, "-lgpr", "-lgrpc", "-lgrpc++_unsecure", "-lprotobuf", "-lpthread" , "-ldl"
}

model {
	
	repositories {
		libs(PrebuiltLibraries) {
			gpr {
				binaries.withType(StaticLibraryBinary) {
					staticLibraryFile = file(base_dir + "/lib/" + libgpr)
				}
			}
			grpc {
				headers.srcDir base_dir + "/include"
				binaries.withType(StaticLibraryBinary) {
					staticLibraryFile = file(base_dir + "/lib/" + libgrpc)
				}
			}
			grpcpp {
				headers.srcDir base_dir + "/include"
				binaries.withType(StaticLibraryBinary) {
					staticLibraryFile = file(base_dir + "/lib/" + libgrpcpp)
				}
			}
			protobuf {
				headers.srcDir base_dir + "/include/google"
				binaries.withType(StaticLibraryBinary) {
					staticLibraryFile = file(base_dir + "/lib/" + libprotobuf)
				}
			}
		}
	}
	
	components {

		content_server(NativeExecutableSpec) {
			sources {
				cpp { 
					lib library: "gpr", linkage: "static"
					lib library: "grpc", linkage: "static"
					lib library: "grpcpp", linkage: "static"
					lib library: "protobuf", linkage: "static"
				}
			}
		}
	}
}


task runTest(type:Exec) {
	dependsOn tasks.withType(InstallExecutable)
	executable "build/install/testExecutable/test"
	args "--out", "build/test_output.txt"
}

runTest { group = 'test' }


task protoc (type:Exec) {
	workingDir "protos"
	executable "./build.proto.sh"
	args "cms.proto", "../src/content_server"
}

